{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 559
    },
    "id": "PpLSLHa24BiW",
    "outputId": "9a98312c-f8be-4455-9039-6d47374e4be9"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Checking whether there is an H2O instance running at http://localhost:54321 . connected.\n",
      "Attempting to start a local H2O server...\n",
      "  Java Version: java version \"1.8.0_131\"; Java(TM) SE Runtime Environment (build 1.8.0_131-b11); Java HotSpot(TM) 64-Bit Server VM (build 25.131-b11, mixed mode)\n",
      "  Starting server from /Users/harshitaggarwal/opt/anaconda3/lib/python3.8/site-packages/h2o/backend/bin/h2o.jar\n",
      "  Ice root: /var/folders/s1/pgdbnd5j5xncqv24dcv_cpyh0000gn/T/tmpxey9abt8\n",
      "  JVM stdout: /var/folders/s1/pgdbnd5j5xncqv24dcv_cpyh0000gn/T/tmpxey9abt8/h2o_harshitaggarwal_started_from_python.out\n",
      "  JVM stderr: /var/folders/s1/pgdbnd5j5xncqv24dcv_cpyh0000gn/T/tmpxey9abt8/h2o_harshitaggarwal_started_from_python.err\n",
      "  Server is running at http://127.0.0.1:54323\n",
      "Connecting to H2O server at http://127.0.0.1:54323 ... successful.\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div style=\"overflow:auto\"><table style=\"width:50%\"><tr><td>H2O_cluster_uptime:</td>\n",
       "<td>03 secs</td></tr>\n",
       "<tr><td>H2O_cluster_timezone:</td>\n",
       "<td>America/New_York</td></tr>\n",
       "<tr><td>H2O_data_parsing_timezone:</td>\n",
       "<td>UTC</td></tr>\n",
       "<tr><td>H2O_cluster_version:</td>\n",
       "<td>3.36.1.2</td></tr>\n",
       "<tr><td>H2O_cluster_version_age:</td>\n",
       "<td>6 days </td></tr>\n",
       "<tr><td>H2O_cluster_name:</td>\n",
       "<td>H2O_from_python_harshitaggarwal_pcy154</td></tr>\n",
       "<tr><td>H2O_cluster_total_nodes:</td>\n",
       "<td>1</td></tr>\n",
       "<tr><td>H2O_cluster_free_memory:</td>\n",
       "<td>5.333 Gb</td></tr>\n",
       "<tr><td>H2O_cluster_total_cores:</td>\n",
       "<td>8</td></tr>\n",
       "<tr><td>H2O_cluster_allowed_cores:</td>\n",
       "<td>4</td></tr>\n",
       "<tr><td>H2O_cluster_status:</td>\n",
       "<td>locked, healthy</td></tr>\n",
       "<tr><td>H2O_connection_url:</td>\n",
       "<td>http://127.0.0.1:54323</td></tr>\n",
       "<tr><td>H2O_connection_proxy:</td>\n",
       "<td>{\"http\": null, \"https\": null}</td></tr>\n",
       "<tr><td>H2O_internal_security:</td>\n",
       "<td>False</td></tr>\n",
       "<tr><td>Python_version:</td>\n",
       "<td>3.8.8 final</td></tr></table></div>"
      ],
      "text/plain": [
       "--------------------------  --------------------------------------\n",
       "H2O_cluster_uptime:         03 secs\n",
       "H2O_cluster_timezone:       America/New_York\n",
       "H2O_data_parsing_timezone:  UTC\n",
       "H2O_cluster_version:        3.36.1.2\n",
       "H2O_cluster_version_age:    6 days\n",
       "H2O_cluster_name:           H2O_from_python_harshitaggarwal_pcy154\n",
       "H2O_cluster_total_nodes:    1\n",
       "H2O_cluster_free_memory:    5.333 Gb\n",
       "H2O_cluster_total_cores:    8\n",
       "H2O_cluster_allowed_cores:  4\n",
       "H2O_cluster_status:         locked, healthy\n",
       "H2O_connection_url:         http://127.0.0.1:54323\n",
       "H2O_connection_proxy:       {\"http\": null, \"https\": null}\n",
       "H2O_internal_security:      False\n",
       "Python_version:             3.8.8 final\n",
       "--------------------------  --------------------------------------"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "import h2o                                                    # base h2o package for python\n",
    "from h2o.estimators.glm import H2OGeneralizedLinearEstimator  # h2o elastic net models class\n",
    "from h2o.grid.grid_search import H2OGridSearch                # grid search class and syntax for h2o models\n",
    "from interpret import show                                    # basic visualizations from interpret package\n",
    "from interpret.glassbox import ExplainableBoostingClassifier  # interpret ebm class\n",
    "from interpret.perf import ROC                                # ROC measure for ebm\n",
    "import itertools                                              # for cartesian product of parameters\n",
    "import matplotlib.pyplot as plt                               # basic plotting\n",
    "import numpy as np                                            # for basic array manipulation                            \n",
    "import pandas as pd                                           # for dataframe manipulation\n",
    "import seaborn as sns                                         # slightly better plotting  \n",
    "import time                                                   # for timers\n",
    "import xgboost as xgb                                         # base xgboost package for python\n",
    "import io\n",
    "import datetime                                               # for timestamp \n",
    "\n",
    "                         \n",
    "\n",
    "# set numpy random seed for better reproducibility\n",
    "SEED = 12345 \n",
    "\n",
    "# set number of threads\n",
    "NTHREAD = 4\n",
    "\n",
    "h2o.init(max_mem_size='6G', nthreads=NTHREAD) # start h2o with plenty of memory and threads\n",
    "h2o.remove_all()                              # clears h2o memory\n",
    "h2o.no_progress()                             # turn off h2o progress indicators    \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {
    "id": "MfOMah6R4Y2W"
   },
   "outputs": [],
   "source": [
    "tic = time.time()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {
    "id": "h9XlR_Y1-WKu"
   },
   "outputs": [],
   "source": [
    "data = pd.read_csv('hmda_train_preprocessed.csv')\n",
    "test = pd.read_csv('hmda_test_preprocessed.csv')\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "4qxL7ZW2zELT",
    "outputId": "6a28579a-d171-4b56-b462-d90d82ff3f34"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(160338, 23)"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check training data to make sure contents loaded properly\n",
    "\n",
    "data.shape\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 204
    },
    "id": "vSKxSEpN49Ye",
    "outputId": "07430f54-5358-4a59-f9c6-16ecff473d68"
   },
   "outputs": [
    {
     "data": {
      "text/plain": [
       "(19831, 22)"
      ]
     },
     "execution_count": 5,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# Check test data to make sure contents loaded properly\n",
    "\n",
    "test.shape"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 488
    },
    "id": "ah5AJyjZrXlV",
    "outputId": "0b135947-2595-4b51-99c4-58e091ad533e"
   },
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>row_id</th>\n",
       "      <th>black</th>\n",
       "      <th>asian</th>\n",
       "      <th>white</th>\n",
       "      <th>amind</th>\n",
       "      <th>hipac</th>\n",
       "      <th>hispanic</th>\n",
       "      <th>non_hispanic</th>\n",
       "      <th>male</th>\n",
       "      <th>female</th>\n",
       "      <th>...</th>\n",
       "      <th>conforming</th>\n",
       "      <th>debt_to_income_ratio_missing</th>\n",
       "      <th>loan_amount_std</th>\n",
       "      <th>loan_to_value_ratio_std</th>\n",
       "      <th>no_intro_rate_period_std</th>\n",
       "      <th>intro_rate_period_std</th>\n",
       "      <th>property_value_std</th>\n",
       "      <th>income_std</th>\n",
       "      <th>debt_to_income_ratio_std</th>\n",
       "      <th>high_priced</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.514393</td>\n",
       "      <td>0.333922</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.535932</td>\n",
       "      <td>-0.040307</td>\n",
       "      <td>0.854601</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.118642</td>\n",
       "      <td>0.268727</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.227585</td>\n",
       "      <td>-0.018133</td>\n",
       "      <td>-0.425131</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>2</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.778227</td>\n",
       "      <td>0.228996</td>\n",
       "      <td>-4.091747</td>\n",
       "      <td>4.610857</td>\n",
       "      <td>-0.720941</td>\n",
       "      <td>-0.032338</td>\n",
       "      <td>0.123326</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>3</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.074670</td>\n",
       "      <td>-1.150240</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>0.358276</td>\n",
       "      <td>-0.018133</td>\n",
       "      <td>-0.425131</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>4</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.602338</td>\n",
       "      <td>0.552520</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.628437</td>\n",
       "      <td>-0.038228</td>\n",
       "      <td>0.763191</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>5</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.338504</td>\n",
       "      <td>0.372784</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.412593</td>\n",
       "      <td>-0.024716</td>\n",
       "      <td>0.397554</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.426448</td>\n",
       "      <td>0.355249</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.474263</td>\n",
       "      <td>-0.020904</td>\n",
       "      <td>1.037419</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>7</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.734255</td>\n",
       "      <td>0.552520</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.720941</td>\n",
       "      <td>-0.039614</td>\n",
       "      <td>0.488963</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0.277109</td>\n",
       "      <td>0.142995</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>0.111598</td>\n",
       "      <td>-0.019865</td>\n",
       "      <td>0.031916</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>9</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1.332446</td>\n",
       "      <td>-0.261719</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>1.190815</td>\n",
       "      <td>0.075764</td>\n",
       "      <td>-1.156406</td>\n",
       "      <td>0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>10 rows × 23 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   row_id  black  asian  white  amind  hipac  hispanic  non_hispanic  male  \\\n",
       "0       0    NaN    NaN    NaN    NaN    NaN       NaN           NaN   1.0   \n",
       "1       1    0.0    0.0    1.0    0.0    0.0       0.0           1.0   NaN   \n",
       "2       2    NaN    NaN    NaN    NaN    NaN       NaN           NaN   NaN   \n",
       "3       3    0.0    0.0    1.0    0.0    0.0       0.0           1.0   NaN   \n",
       "4       4    0.0    0.0    1.0    0.0    0.0       1.0           0.0   NaN   \n",
       "5       5    0.0    0.0    1.0    0.0    0.0       0.0           1.0   NaN   \n",
       "6       6    0.0    0.0    1.0    0.0    0.0       0.0           1.0   0.0   \n",
       "7       7    0.0    0.0    1.0    0.0    0.0       0.0           1.0   1.0   \n",
       "8       8    0.0    0.0    1.0    0.0    0.0       0.0           1.0   NaN   \n",
       "9       9    0.0    0.0    1.0    0.0    0.0       0.0           1.0   NaN   \n",
       "\n",
       "   female  ...  conforming  debt_to_income_ratio_missing  loan_amount_std  \\\n",
       "0     0.0  ...           1                             0        -0.514393   \n",
       "1     NaN  ...           1                             0        -0.118642   \n",
       "2     NaN  ...           1                             0        -0.778227   \n",
       "3     NaN  ...           1                             0        -0.074670   \n",
       "4     NaN  ...           1                             0        -0.602338   \n",
       "5     NaN  ...           1                             0        -0.338504   \n",
       "6     1.0  ...           1                             0        -0.426448   \n",
       "7     0.0  ...           1                             0        -0.734255   \n",
       "8     NaN  ...           1                             0         0.277109   \n",
       "9     NaN  ...           0                             0         1.332446   \n",
       "\n",
       "   loan_to_value_ratio_std  no_intro_rate_period_std  intro_rate_period_std  \\\n",
       "0                 0.333922                  0.244394              -0.215304   \n",
       "1                 0.268727                  0.244394              -0.215304   \n",
       "2                 0.228996                 -4.091747               4.610857   \n",
       "3                -1.150240                  0.244394              -0.215304   \n",
       "4                 0.552520                  0.244394              -0.215304   \n",
       "5                 0.372784                  0.244394              -0.215304   \n",
       "6                 0.355249                  0.244394              -0.215304   \n",
       "7                 0.552520                  0.244394              -0.215304   \n",
       "8                 0.142995                  0.244394              -0.215304   \n",
       "9                -0.261719                  0.244394              -0.215304   \n",
       "\n",
       "   property_value_std  income_std  debt_to_income_ratio_std  high_priced  \n",
       "0           -0.535932   -0.040307                  0.854601            0  \n",
       "1           -0.227585   -0.018133                 -0.425131            0  \n",
       "2           -0.720941   -0.032338                  0.123326            0  \n",
       "3            0.358276   -0.018133                 -0.425131            0  \n",
       "4           -0.628437   -0.038228                  0.763191            0  \n",
       "5           -0.412593   -0.024716                  0.397554            0  \n",
       "6           -0.474263   -0.020904                  1.037419            0  \n",
       "7           -0.720941   -0.039614                  0.488963            0  \n",
       "8            0.111598   -0.019865                  0.031916            0  \n",
       "9            1.190815    0.075764                 -1.156406            0  \n",
       "\n",
       "[10 rows x 23 columns]"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head(10)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {
    "id": "-j5L7pIhCo2r"
   },
   "outputs": [],
   "source": [
    "# Define the target and predictor variables\n",
    "\n",
    "y_name = 'high_priced'\n",
    "#x_names = ['term_360', 'conforming', 'debt_to_income_ratio_missing', 'loan_amount_std', 'loan_to_value_ratio_std', 'no_intro_rate_period_std',\n",
    " #          'intro_rate_period_std', 'property_value_std', 'income_std', 'debt_to_income_ratio_std']\n",
    "\n",
    "\n",
    "x_names = ['term_360', 'conforming','loan_amount_std', 'loan_to_value_ratio_std', 'no_intro_rate_period_std',\n",
    "           'intro_rate_period_std', 'property_value_std', 'income_std', 'debt_to_income_ratio_std']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 879
    },
    "id": "9yvQMiKcCtoU",
    "outputId": "7d112ceb-9737-4350-a8d9-d7f4f66e30be"
   },
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1080x1080 with 12 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "_ = data[x_names + [y_name]].hist(bins=50, figsize=(15, 15))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/",
     "height": 410
    },
    "id": "seaLB8R1C0Zx",
    "outputId": "f8edf613-508a-4dd5-bdda-33af7113f2ab"
   },
   "outputs": [
    {
     "data": {
      "image/png": "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\n",
      "text/plain": [
       "<Figure size 432x288 with 2 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "corr = data[x_names + [y_name]].corr()\n",
    "_ = sns.heatmap(corr, \n",
    "                xticklabels=corr.columns.values,\n",
    "                yticklabels=corr.columns.values)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ei1ZtaQqC4vS"
   },
   "source": [
    "Fit interpretable models\n",
    "\n",
    "Split data into train and validation partitions\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "zbbmylNWC6_7",
    "outputId": "94e35972-3338-4979-a246-c3cf32075d93"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Train data rows = 112253, columns = 23\n",
      "Validation data rows = 48085, columns = 23\n"
     ]
    }
   ],
   "source": [
    "np.random.seed(SEED) # preserve exact reproducibility for this cell\n",
    "\n",
    "split_ratio = 0.7 # 70%/30% train/test split\n",
    "\n",
    "# execute split\n",
    "split = np.random.rand(len(data)) < split_ratio\n",
    "train = data[split]\n",
    "valid = data[~split]\n",
    "\n",
    "# summarize split\n",
    "print('Train data rows = %d, columns = %d' % (train.shape[0], train.shape[1]))\n",
    "print('Validation data rows = %d, columns = %d' % (valid.shape[0], valid.shape[1]))\n",
    "\n",
    "# benchmark - Train data rows = 112253, columns = 23\n",
    "# benchmark - Validation data rows = 48085, columns = 23\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "w3fIsQq0C-Uy"
   },
   "source": [
    "Elastic Net\n",
    "\n",
    "Define wrapper function for grid search\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "metadata": {
    "id": "GvXdkbuVDBbd"
   },
   "outputs": [],
   "source": [
    "def glm_grid(x_names, y_name, htrain, hvalid, seed):\n",
    "\n",
    "    \"\"\" Wrapper function for penalized GLM with alpha and lambda search.\n",
    "\n",
    "    :param x_names: Names of input features.\n",
    "    :param y_name: Name of target feature.\n",
    "    :param htrain: Training H2OFrame.\n",
    "    :param hvalid: Validation H2OFrame.\n",
    "    :param seed: Random seed for better reproducibility.\n",
    "    :return: Best H2OGeneralizedLinearEstimator.\n",
    "    \"\"\"\n",
    "\n",
    "    alpha_opts = [0.01, 0.25, 0.3, 0.5, 0.6, 0.75, 0.8, 0.99]  # always keep some L2\n",
    "\n",
    "    # define search criteria\n",
    "    # i.e., over alpha\n",
    "    # lamda search handled by lambda_search param below\n",
    "    hyper_parameters = {'alpha': alpha_opts}\n",
    "\n",
    "    # initialize grid search\n",
    "    grid = H2OGridSearch(\n",
    "        H2OGeneralizedLinearEstimator(family='binomial',\n",
    "                                      lambda_search=True,\n",
    "                                      seed=seed), # seed for grid search\n",
    "        hyper_params=hyper_parameters)\n",
    "\n",
    "    # execute training w/ grid search\n",
    "    grid.train(y=y_name,\n",
    "               x=x_names,\n",
    "               training_frame=htrain,\n",
    "               validation_frame=hvalid,\n",
    "               seed=seed) # seed for training\n",
    "\n",
    "    # select best model from grid search\n",
    "    best_model = grid.get_grid()[0]\n",
    "    del grid\n",
    "\n",
    "    return best_model\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Xqb13YRuDQNc"
   },
   "source": [
    "Fit elastic net with grid search\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "riUl8rmODD51",
    "outputId": "27dbf9ad-5f5d-4313-c7cf-bf2613be49b1"
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "/Users/harshitaggarwal/opt/anaconda3/lib/python3.8/site-packages/h2o/grid/grid_search.py:427: UserWarning: Adding alpha array to hyperparameter runs slower with gridsearch. This is due to the fact that the algo has to run initialization for every alpha value. Setting the alpha array as a model parameter will skip the initialization and run faster overall.\n",
      "  warnings.warn(w_message)\n"
     ]
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Elastic net GLM training completed in 25.10 s.\n"
     ]
    }
   ],
   "source": [
    "# start local timer\n",
    "glm_tic = time.time()\n",
    "\n",
    "# convert data to h2o frames\n",
    "htrain = h2o.H2OFrame(train)\n",
    "hvalid = h2o.H2OFrame(valid)\n",
    "\n",
    "# train with grid search\n",
    "best_glm = glm_grid(x_names, y_name, htrain, hvalid, SEED)\n",
    "\n",
    "# end local timer\n",
    "glm_toc = time.time() - glm_tic\n",
    "print('Elastic net GLM training completed in %.2f s.' % (glm_toc))\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Model Details\n",
      "=============\n",
      "H2OGeneralizedLinearEstimator :  Generalized Linear Modeling\n",
      "Model Key:  Grid_GLM_Key_Frame__upload_a4c462ab4547710d92e3ce2696a0406c.hex_model_python_1654129841008_1_model_8\n",
      "\n",
      "\n",
      "GLM Model: summary\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>family</th>\n",
       "      <th>link</th>\n",
       "      <th>regularization</th>\n",
       "      <th>lambda_search</th>\n",
       "      <th>number_of_predictors_total</th>\n",
       "      <th>number_of_active_predictors</th>\n",
       "      <th>number_of_iterations</th>\n",
       "      <th>training_frame</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td></td>\n",
       "      <td>binomial</td>\n",
       "      <td>logit</td>\n",
       "      <td>Elastic Net (alpha = 0.99, lambda = 0.007062 )</td>\n",
       "      <td>nlambda = 100, lambda.max = 0.04136, lambda.min = 0.007062, lambda...</td>\n",
       "      <td>9</td>\n",
       "      <td>4</td>\n",
       "      <td>34</td>\n",
       "      <td>Key_Frame__upload_a4c462ab4547710d92e3ce2696a0406c.hex</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       family   link                                  regularization  \\\n",
       "0    binomial  logit  Elastic Net (alpha = 0.99, lambda = 0.007062 )   \n",
       "\n",
       "                                                           lambda_search  \\\n",
       "0  nlambda = 100, lambda.max = 0.04136, lambda.min = 0.007062, lambda...   \n",
       "\n",
       "   number_of_predictors_total number_of_active_predictors  \\\n",
       "0                           9                           4   \n",
       "\n",
       "   number_of_iterations  \\\n",
       "0                    34   \n",
       "\n",
       "                                           training_frame  \n",
       "0  Key_Frame__upload_a4c462ab4547710d92e3ce2696a0406c.hex  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "ModelMetricsBinomialGLM: glm\n",
      "** Reported on train data. **\n",
      "\n",
      "MSE: 0.08251332157851761\n",
      "RMSE: 0.2872513212824575\n",
      "LogLoss: 0.2899862237861771\n",
      "Null degrees of freedom: 112252\n",
      "Residual degrees of freedom: 112248\n",
      "Null deviance: 71663.33577025973\n",
      "Residual deviance: 65106.6569113279\n",
      "AIC: 65116.6569113279\n",
      "AUC: 0.75477886750561\n",
      "AUCPR: 0.22457478896616853\n",
      "Gini: 0.5095577350112199\n",
      "\n",
      "Confusion Matrix (Act/Pred) for max f1 @ threshold = 0.12746672433655978: \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>Error</th>\n",
       "      <th>Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>77763.0</td>\n",
       "      <td>23563.0</td>\n",
       "      <td>0.2325</td>\n",
       "      <td>(23563.0/101326.0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>4487.0</td>\n",
       "      <td>6440.0</td>\n",
       "      <td>0.4106</td>\n",
       "      <td>(4487.0/10927.0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total</td>\n",
       "      <td>82250.0</td>\n",
       "      <td>30003.0</td>\n",
       "      <td>0.2499</td>\n",
       "      <td>(28050.0/112253.0)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0        1   Error                 Rate\n",
       "0      0  77763.0  23563.0  0.2325   (23563.0/101326.0)\n",
       "1      1   4487.0   6440.0  0.4106     (4487.0/10927.0)\n",
       "2  Total  82250.0  30003.0  0.2499   (28050.0/112253.0)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Maximum Metrics: Maximum metrics at their respective thresholds\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>metric</th>\n",
       "      <th>threshold</th>\n",
       "      <th>value</th>\n",
       "      <th>idx</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>max f1</td>\n",
       "      <td>0.127467</td>\n",
       "      <td>0.314684</td>\n",
       "      <td>162.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>max f2</td>\n",
       "      <td>0.104111</td>\n",
       "      <td>0.466275</td>\n",
       "      <td>206.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>max f0point5</td>\n",
       "      <td>0.155256</td>\n",
       "      <td>0.266588</td>\n",
       "      <td>112.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>max accuracy</td>\n",
       "      <td>0.394589</td>\n",
       "      <td>0.902684</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>max precision</td>\n",
       "      <td>0.394589</td>\n",
       "      <td>0.560000</td>\n",
       "      <td>11.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>max recall</td>\n",
       "      <td>0.000137</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>399.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>max specificity</td>\n",
       "      <td>0.998902</td>\n",
       "      <td>0.999951</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>max absolute_mcc</td>\n",
       "      <td>0.121369</td>\n",
       "      <td>0.242135</td>\n",
       "      <td>173.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>max min_per_class_accuracy</td>\n",
       "      <td>0.115395</td>\n",
       "      <td>0.689851</td>\n",
       "      <td>184.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>max mean_per_class_accuracy</td>\n",
       "      <td>0.104111</td>\n",
       "      <td>0.696802</td>\n",
       "      <td>206.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>max tns</td>\n",
       "      <td>0.998902</td>\n",
       "      <td>101321.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>max fns</td>\n",
       "      <td>0.998902</td>\n",
       "      <td>10927.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>max fps</td>\n",
       "      <td>0.000137</td>\n",
       "      <td>101326.000000</td>\n",
       "      <td>399.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>max tps</td>\n",
       "      <td>0.000137</td>\n",
       "      <td>10927.000000</td>\n",
       "      <td>399.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>max tnr</td>\n",
       "      <td>0.998902</td>\n",
       "      <td>0.999951</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>max fnr</td>\n",
       "      <td>0.998902</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>max fpr</td>\n",
       "      <td>0.000137</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>399.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>max tpr</td>\n",
       "      <td>0.000137</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>399.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         metric  threshold          value    idx\n",
       "0                        max f1   0.127467       0.314684  162.0\n",
       "1                        max f2   0.104111       0.466275  206.0\n",
       "2                  max f0point5   0.155256       0.266588  112.0\n",
       "3                  max accuracy   0.394589       0.902684   11.0\n",
       "4                 max precision   0.394589       0.560000   11.0\n",
       "5                    max recall   0.000137       1.000000  399.0\n",
       "6               max specificity   0.998902       0.999951    0.0\n",
       "7              max absolute_mcc   0.121369       0.242135  173.0\n",
       "8    max min_per_class_accuracy   0.115395       0.689851  184.0\n",
       "9   max mean_per_class_accuracy   0.104111       0.696802  206.0\n",
       "10                      max tns   0.998902  101321.000000    0.0\n",
       "11                      max fns   0.998902   10927.000000    0.0\n",
       "12                      max fps   0.000137  101326.000000  399.0\n",
       "13                      max tps   0.000137   10927.000000  399.0\n",
       "14                      max tnr   0.998902       0.999951    0.0\n",
       "15                      max fnr   0.998902       1.000000    0.0\n",
       "16                      max fpr   0.000137       1.000000  399.0\n",
       "17                      max tpr   0.000137       1.000000  399.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Gains/Lift Table: Avg response rate:  9.73 %, avg score:  9.49 %\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>group</th>\n",
       "      <th>cumulative_data_fraction</th>\n",
       "      <th>lower_threshold</th>\n",
       "      <th>lift</th>\n",
       "      <th>cumulative_lift</th>\n",
       "      <th>response_rate</th>\n",
       "      <th>score</th>\n",
       "      <th>cumulative_response_rate</th>\n",
       "      <th>cumulative_score</th>\n",
       "      <th>capture_rate</th>\n",
       "      <th>cumulative_capture_rate</th>\n",
       "      <th>gain</th>\n",
       "      <th>cumulative_gain</th>\n",
       "      <th>kolmogorov_smirnov</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.010156</td>\n",
       "      <td>2.222064e-01</td>\n",
       "      <td>3.181023</td>\n",
       "      <td>3.181023</td>\n",
       "      <td>0.309649</td>\n",
       "      <td>0.266256</td>\n",
       "      <td>0.309649</td>\n",
       "      <td>0.266256</td>\n",
       "      <td>0.032305</td>\n",
       "      <td>0.032305</td>\n",
       "      <td>218.102343</td>\n",
       "      <td>218.102343</td>\n",
       "      <td>0.024538</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.020837</td>\n",
       "      <td>2.044061e-01</td>\n",
       "      <td>3.170148</td>\n",
       "      <td>3.175449</td>\n",
       "      <td>0.308590</td>\n",
       "      <td>0.211360</td>\n",
       "      <td>0.309106</td>\n",
       "      <td>0.238116</td>\n",
       "      <td>0.033861</td>\n",
       "      <td>0.066166</td>\n",
       "      <td>217.014812</td>\n",
       "      <td>217.544861</td>\n",
       "      <td>0.050218</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.030298</td>\n",
       "      <td>1.935179e-01</td>\n",
       "      <td>3.047074</td>\n",
       "      <td>3.135362</td>\n",
       "      <td>0.296610</td>\n",
       "      <td>0.198307</td>\n",
       "      <td>0.305204</td>\n",
       "      <td>0.225685</td>\n",
       "      <td>0.028828</td>\n",
       "      <td>0.094994</td>\n",
       "      <td>204.707434</td>\n",
       "      <td>213.536232</td>\n",
       "      <td>0.071673</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.041754</td>\n",
       "      <td>1.863794e-01</td>\n",
       "      <td>3.067519</td>\n",
       "      <td>3.116748</td>\n",
       "      <td>0.298600</td>\n",
       "      <td>0.189620</td>\n",
       "      <td>0.303392</td>\n",
       "      <td>0.215790</td>\n",
       "      <td>0.035142</td>\n",
       "      <td>0.130136</td>\n",
       "      <td>206.751906</td>\n",
       "      <td>211.674776</td>\n",
       "      <td>0.097914</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.050413</td>\n",
       "      <td>1.810878e-01</td>\n",
       "      <td>2.663369</td>\n",
       "      <td>3.038875</td>\n",
       "      <td>0.259259</td>\n",
       "      <td>0.183169</td>\n",
       "      <td>0.295812</td>\n",
       "      <td>0.210187</td>\n",
       "      <td>0.023062</td>\n",
       "      <td>0.153198</td>\n",
       "      <td>166.336869</td>\n",
       "      <td>203.887456</td>\n",
       "      <td>0.113870</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0.100060</td>\n",
       "      <td>1.617423e-01</td>\n",
       "      <td>2.376079</td>\n",
       "      <td>2.710014</td>\n",
       "      <td>0.231294</td>\n",
       "      <td>0.170427</td>\n",
       "      <td>0.263800</td>\n",
       "      <td>0.190459</td>\n",
       "      <td>0.117965</td>\n",
       "      <td>0.271163</td>\n",
       "      <td>137.607906</td>\n",
       "      <td>171.001422</td>\n",
       "      <td>0.189555</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0.150081</td>\n",
       "      <td>1.490695e-01</td>\n",
       "      <td>2.168032</td>\n",
       "      <td>2.529375</td>\n",
       "      <td>0.211042</td>\n",
       "      <td>0.155008</td>\n",
       "      <td>0.246216</td>\n",
       "      <td>0.178643</td>\n",
       "      <td>0.108447</td>\n",
       "      <td>0.379610</td>\n",
       "      <td>116.803158</td>\n",
       "      <td>152.937479</td>\n",
       "      <td>0.254282</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0.200280</td>\n",
       "      <td>1.387555e-01</td>\n",
       "      <td>1.894169</td>\n",
       "      <td>2.370164</td>\n",
       "      <td>0.184383</td>\n",
       "      <td>0.143775</td>\n",
       "      <td>0.230718</td>\n",
       "      <td>0.169904</td>\n",
       "      <td>0.095086</td>\n",
       "      <td>0.474696</td>\n",
       "      <td>89.416863</td>\n",
       "      <td>137.016357</td>\n",
       "      <td>0.304009</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>0.300028</td>\n",
       "      <td>1.220170e-01</td>\n",
       "      <td>1.627605</td>\n",
       "      <td>2.123291</td>\n",
       "      <td>0.158435</td>\n",
       "      <td>0.129999</td>\n",
       "      <td>0.206687</td>\n",
       "      <td>0.156637</td>\n",
       "      <td>0.162350</td>\n",
       "      <td>0.637046</td>\n",
       "      <td>62.760476</td>\n",
       "      <td>112.329071</td>\n",
       "      <td>0.373362</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>0.399998</td>\n",
       "      <td>1.070768e-01</td>\n",
       "      <td>1.158939</td>\n",
       "      <td>1.882273</td>\n",
       "      <td>0.112814</td>\n",
       "      <td>0.114327</td>\n",
       "      <td>0.183225</td>\n",
       "      <td>0.146063</td>\n",
       "      <td>0.115860</td>\n",
       "      <td>0.752906</td>\n",
       "      <td>15.893867</td>\n",
       "      <td>88.227250</td>\n",
       "      <td>0.390965</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>0.500031</td>\n",
       "      <td>9.291442e-02</td>\n",
       "      <td>0.881013</td>\n",
       "      <td>1.681967</td>\n",
       "      <td>0.085760</td>\n",
       "      <td>0.099964</td>\n",
       "      <td>0.163727</td>\n",
       "      <td>0.136840</td>\n",
       "      <td>0.088130</td>\n",
       "      <td>0.841036</td>\n",
       "      <td>-11.898720</td>\n",
       "      <td>68.196705</td>\n",
       "      <td>0.377779</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>0.600011</td>\n",
       "      <td>7.890517e-02</td>\n",
       "      <td>0.600471</td>\n",
       "      <td>1.501758</td>\n",
       "      <td>0.058451</td>\n",
       "      <td>0.085989</td>\n",
       "      <td>0.146185</td>\n",
       "      <td>0.128367</td>\n",
       "      <td>0.060035</td>\n",
       "      <td>0.901071</td>\n",
       "      <td>-39.952920</td>\n",
       "      <td>50.175781</td>\n",
       "      <td>0.333526</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>0.699999</td>\n",
       "      <td>6.384666e-02</td>\n",
       "      <td>0.405465</td>\n",
       "      <td>1.345162</td>\n",
       "      <td>0.039469</td>\n",
       "      <td>0.071550</td>\n",
       "      <td>0.130942</td>\n",
       "      <td>0.120251</td>\n",
       "      <td>0.040542</td>\n",
       "      <td>0.941613</td>\n",
       "      <td>-59.453527</td>\n",
       "      <td>34.516245</td>\n",
       "      <td>0.267669</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>0.800246</td>\n",
       "      <td>4.733839e-02</td>\n",
       "      <td>0.276612</td>\n",
       "      <td>1.211305</td>\n",
       "      <td>0.026926</td>\n",
       "      <td>0.055890</td>\n",
       "      <td>0.117912</td>\n",
       "      <td>0.112189</td>\n",
       "      <td>0.027729</td>\n",
       "      <td>0.969342</td>\n",
       "      <td>-72.338780</td>\n",
       "      <td>21.130521</td>\n",
       "      <td>0.187331</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>0.899994</td>\n",
       "      <td>2.686463e-02</td>\n",
       "      <td>0.155971</td>\n",
       "      <td>1.094341</td>\n",
       "      <td>0.015183</td>\n",
       "      <td>0.037493</td>\n",
       "      <td>0.106526</td>\n",
       "      <td>0.103910</td>\n",
       "      <td>0.015558</td>\n",
       "      <td>0.984900</td>\n",
       "      <td>-84.402886</td>\n",
       "      <td>9.434068</td>\n",
       "      <td>0.094062</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>3.388491e-14</td>\n",
       "      <td>0.150993</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.014698</td>\n",
       "      <td>0.013503</td>\n",
       "      <td>0.097343</td>\n",
       "      <td>0.094869</td>\n",
       "      <td>0.015100</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-84.900731</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    group  cumulative_data_fraction  lower_threshold      lift  \\\n",
       "0       1                  0.010156     2.222064e-01  3.181023   \n",
       "1       2                  0.020837     2.044061e-01  3.170148   \n",
       "2       3                  0.030298     1.935179e-01  3.047074   \n",
       "3       4                  0.041754     1.863794e-01  3.067519   \n",
       "4       5                  0.050413     1.810878e-01  2.663369   \n",
       "5       6                  0.100060     1.617423e-01  2.376079   \n",
       "6       7                  0.150081     1.490695e-01  2.168032   \n",
       "7       8                  0.200280     1.387555e-01  1.894169   \n",
       "8       9                  0.300028     1.220170e-01  1.627605   \n",
       "9      10                  0.399998     1.070768e-01  1.158939   \n",
       "10     11                  0.500031     9.291442e-02  0.881013   \n",
       "11     12                  0.600011     7.890517e-02  0.600471   \n",
       "12     13                  0.699999     6.384666e-02  0.405465   \n",
       "13     14                  0.800246     4.733839e-02  0.276612   \n",
       "14     15                  0.899994     2.686463e-02  0.155971   \n",
       "15     16                  1.000000     3.388491e-14  0.150993   \n",
       "\n",
       "    cumulative_lift  response_rate     score  cumulative_response_rate  \\\n",
       "0          3.181023       0.309649  0.266256                  0.309649   \n",
       "1          3.175449       0.308590  0.211360                  0.309106   \n",
       "2          3.135362       0.296610  0.198307                  0.305204   \n",
       "3          3.116748       0.298600  0.189620                  0.303392   \n",
       "4          3.038875       0.259259  0.183169                  0.295812   \n",
       "5          2.710014       0.231294  0.170427                  0.263800   \n",
       "6          2.529375       0.211042  0.155008                  0.246216   \n",
       "7          2.370164       0.184383  0.143775                  0.230718   \n",
       "8          2.123291       0.158435  0.129999                  0.206687   \n",
       "9          1.882273       0.112814  0.114327                  0.183225   \n",
       "10         1.681967       0.085760  0.099964                  0.163727   \n",
       "11         1.501758       0.058451  0.085989                  0.146185   \n",
       "12         1.345162       0.039469  0.071550                  0.130942   \n",
       "13         1.211305       0.026926  0.055890                  0.117912   \n",
       "14         1.094341       0.015183  0.037493                  0.106526   \n",
       "15         1.000000       0.014698  0.013503                  0.097343   \n",
       "\n",
       "    cumulative_score  capture_rate  cumulative_capture_rate        gain  \\\n",
       "0           0.266256      0.032305                 0.032305  218.102343   \n",
       "1           0.238116      0.033861                 0.066166  217.014812   \n",
       "2           0.225685      0.028828                 0.094994  204.707434   \n",
       "3           0.215790      0.035142                 0.130136  206.751906   \n",
       "4           0.210187      0.023062                 0.153198  166.336869   \n",
       "5           0.190459      0.117965                 0.271163  137.607906   \n",
       "6           0.178643      0.108447                 0.379610  116.803158   \n",
       "7           0.169904      0.095086                 0.474696   89.416863   \n",
       "8           0.156637      0.162350                 0.637046   62.760476   \n",
       "9           0.146063      0.115860                 0.752906   15.893867   \n",
       "10          0.136840      0.088130                 0.841036  -11.898720   \n",
       "11          0.128367      0.060035                 0.901071  -39.952920   \n",
       "12          0.120251      0.040542                 0.941613  -59.453527   \n",
       "13          0.112189      0.027729                 0.969342  -72.338780   \n",
       "14          0.103910      0.015558                 0.984900  -84.402886   \n",
       "15          0.094869      0.015100                 1.000000  -84.900731   \n",
       "\n",
       "    cumulative_gain  kolmogorov_smirnov  \n",
       "0        218.102343            0.024538  \n",
       "1        217.544861            0.050218  \n",
       "2        213.536232            0.071673  \n",
       "3        211.674776            0.097914  \n",
       "4        203.887456            0.113870  \n",
       "5        171.001422            0.189555  \n",
       "6        152.937479            0.254282  \n",
       "7        137.016357            0.304009  \n",
       "8        112.329071            0.373362  \n",
       "9         88.227250            0.390965  \n",
       "10        68.196705            0.377779  \n",
       "11        50.175781            0.333526  \n",
       "12        34.516245            0.267669  \n",
       "13        21.130521            0.187331  \n",
       "14         9.434068            0.094062  \n",
       "15         0.000000            0.000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "ModelMetricsBinomialGLM: glm\n",
      "** Reported on validation data. **\n",
      "\n",
      "MSE: 0.08102911217723623\n",
      "RMSE: 0.2846561297025522\n",
      "LogLoss: 0.2858621601933513\n",
      "Null degrees of freedom: 48084\n",
      "Residual degrees of freedom: 48080\n",
      "Null deviance: 30240.36713093873\n",
      "Residual deviance: 27491.3639457946\n",
      "AIC: 27501.3639457946\n",
      "AUC: 0.7538148102147294\n",
      "AUCPR: 0.2174957161569428\n",
      "Gini: 0.5076296204294588\n",
      "\n",
      "Confusion Matrix (Act/Pred) for max f1 @ threshold = 0.13971324799629137: \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>0</th>\n",
       "      <th>1</th>\n",
       "      <th>Error</th>\n",
       "      <th>Rate</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>36181.0</td>\n",
       "      <td>7326.0</td>\n",
       "      <td>0.1684</td>\n",
       "      <td>(7326.0/43507.0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>1</td>\n",
       "      <td>2403.0</td>\n",
       "      <td>2175.0</td>\n",
       "      <td>0.5249</td>\n",
       "      <td>(2403.0/4578.0)</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>Total</td>\n",
       "      <td>38584.0</td>\n",
       "      <td>9501.0</td>\n",
       "      <td>0.2023</td>\n",
       "      <td>(9729.0/48085.0)</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                0       1   Error               Rate\n",
       "0      0  36181.0  7326.0  0.1684   (7326.0/43507.0)\n",
       "1      1   2403.0  2175.0  0.5249    (2403.0/4578.0)\n",
       "2  Total  38584.0  9501.0  0.2023   (9729.0/48085.0)"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Maximum Metrics: Maximum metrics at their respective thresholds\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>metric</th>\n",
       "      <th>threshold</th>\n",
       "      <th>value</th>\n",
       "      <th>idx</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>max f1</td>\n",
       "      <td>0.139713</td>\n",
       "      <td>0.308971</td>\n",
       "      <td>141.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>max f2</td>\n",
       "      <td>0.101551</td>\n",
       "      <td>0.459445</td>\n",
       "      <td>212.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>max f0point5</td>\n",
       "      <td>0.163312</td>\n",
       "      <td>0.266580</td>\n",
       "      <td>101.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>max accuracy</td>\n",
       "      <td>0.997543</td>\n",
       "      <td>0.904752</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>max precision</td>\n",
       "      <td>0.400837</td>\n",
       "      <td>0.300000</td>\n",
       "      <td>7.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>max recall</td>\n",
       "      <td>0.000124</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>399.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>max specificity</td>\n",
       "      <td>0.997543</td>\n",
       "      <td>0.999954</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>max absolute_mcc</td>\n",
       "      <td>0.120707</td>\n",
       "      <td>0.237725</td>\n",
       "      <td>175.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>max min_per_class_accuracy</td>\n",
       "      <td>0.114982</td>\n",
       "      <td>0.688004</td>\n",
       "      <td>186.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>max mean_per_class_accuracy</td>\n",
       "      <td>0.101551</td>\n",
       "      <td>0.694660</td>\n",
       "      <td>212.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>max tns</td>\n",
       "      <td>0.997543</td>\n",
       "      <td>43505.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>max fns</td>\n",
       "      <td>0.997543</td>\n",
       "      <td>4578.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>max fps</td>\n",
       "      <td>0.000124</td>\n",
       "      <td>43507.000000</td>\n",
       "      <td>399.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>max tps</td>\n",
       "      <td>0.000124</td>\n",
       "      <td>4578.000000</td>\n",
       "      <td>399.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>max tnr</td>\n",
       "      <td>0.997543</td>\n",
       "      <td>0.999954</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>max fnr</td>\n",
       "      <td>0.997543</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td>max fpr</td>\n",
       "      <td>0.000124</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>399.0</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>17</th>\n",
       "      <td>max tpr</td>\n",
       "      <td>0.000124</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>399.0</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                         metric  threshold         value    idx\n",
       "0                        max f1   0.139713      0.308971  141.0\n",
       "1                        max f2   0.101551      0.459445  212.0\n",
       "2                  max f0point5   0.163312      0.266580  101.0\n",
       "3                  max accuracy   0.997543      0.904752    0.0\n",
       "4                 max precision   0.400837      0.300000    7.0\n",
       "5                    max recall   0.000124      1.000000  399.0\n",
       "6               max specificity   0.997543      0.999954    0.0\n",
       "7              max absolute_mcc   0.120707      0.237725  175.0\n",
       "8    max min_per_class_accuracy   0.114982      0.688004  186.0\n",
       "9   max mean_per_class_accuracy   0.101551      0.694660  212.0\n",
       "10                      max tns   0.997543  43505.000000    0.0\n",
       "11                      max fns   0.997543   4578.000000    0.0\n",
       "12                      max fps   0.000124  43507.000000  399.0\n",
       "13                      max tps   0.000124   4578.000000  399.0\n",
       "14                      max tnr   0.997543      0.999954    0.0\n",
       "15                      max fnr   0.997543      1.000000    0.0\n",
       "16                      max fpr   0.000124      1.000000  399.0\n",
       "17                      max tpr   0.000124      1.000000  399.0"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Gains/Lift Table: Avg response rate:  9.52 %, avg score:  9.48 %\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>group</th>\n",
       "      <th>cumulative_data_fraction</th>\n",
       "      <th>lower_threshold</th>\n",
       "      <th>lift</th>\n",
       "      <th>cumulative_lift</th>\n",
       "      <th>response_rate</th>\n",
       "      <th>score</th>\n",
       "      <th>cumulative_response_rate</th>\n",
       "      <th>cumulative_score</th>\n",
       "      <th>capture_rate</th>\n",
       "      <th>cumulative_capture_rate</th>\n",
       "      <th>gain</th>\n",
       "      <th>cumulative_gain</th>\n",
       "      <th>kolmogorov_smirnov</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>0.010045</td>\n",
       "      <td>2.222380e-01</td>\n",
       "      <td>3.044491</td>\n",
       "      <td>3.044491</td>\n",
       "      <td>0.289855</td>\n",
       "      <td>0.267096</td>\n",
       "      <td>0.289855</td>\n",
       "      <td>0.267096</td>\n",
       "      <td>0.030581</td>\n",
       "      <td>0.030581</td>\n",
       "      <td>204.449130</td>\n",
       "      <td>204.449130</td>\n",
       "      <td>0.022697</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>0.020589</td>\n",
       "      <td>2.044061e-01</td>\n",
       "      <td>3.066109</td>\n",
       "      <td>3.055562</td>\n",
       "      <td>0.291913</td>\n",
       "      <td>0.211831</td>\n",
       "      <td>0.290909</td>\n",
       "      <td>0.238794</td>\n",
       "      <td>0.032329</td>\n",
       "      <td>0.062910</td>\n",
       "      <td>206.610899</td>\n",
       "      <td>205.556217</td>\n",
       "      <td>0.046774</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0.030009</td>\n",
       "      <td>1.938378e-01</td>\n",
       "      <td>2.805569</td>\n",
       "      <td>2.977082</td>\n",
       "      <td>0.267108</td>\n",
       "      <td>0.198511</td>\n",
       "      <td>0.283437</td>\n",
       "      <td>0.226148</td>\n",
       "      <td>0.026431</td>\n",
       "      <td>0.089340</td>\n",
       "      <td>180.556930</td>\n",
       "      <td>197.708208</td>\n",
       "      <td>0.065574</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0.040033</td>\n",
       "      <td>1.868320e-01</td>\n",
       "      <td>3.116182</td>\n",
       "      <td>3.011911</td>\n",
       "      <td>0.296680</td>\n",
       "      <td>0.190275</td>\n",
       "      <td>0.286753</td>\n",
       "      <td>0.217166</td>\n",
       "      <td>0.031236</td>\n",
       "      <td>0.120577</td>\n",
       "      <td>211.618212</td>\n",
       "      <td>201.191129</td>\n",
       "      <td>0.089019</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0.050099</td>\n",
       "      <td>1.810878e-01</td>\n",
       "      <td>3.233514</td>\n",
       "      <td>3.056434</td>\n",
       "      <td>0.307851</td>\n",
       "      <td>0.183875</td>\n",
       "      <td>0.290992</td>\n",
       "      <td>0.210477</td>\n",
       "      <td>0.032547</td>\n",
       "      <td>0.153124</td>\n",
       "      <td>223.351395</td>\n",
       "      <td>205.643420</td>\n",
       "      <td>0.113866</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0.100010</td>\n",
       "      <td>1.618235e-01</td>\n",
       "      <td>2.455192</td>\n",
       "      <td>2.756376</td>\n",
       "      <td>0.233750</td>\n",
       "      <td>0.170589</td>\n",
       "      <td>0.262425</td>\n",
       "      <td>0.190570</td>\n",
       "      <td>0.122543</td>\n",
       "      <td>0.275666</td>\n",
       "      <td>145.519195</td>\n",
       "      <td>175.637568</td>\n",
       "      <td>0.194139</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>7</td>\n",
       "      <td>0.150317</td>\n",
       "      <td>1.488313e-01</td>\n",
       "      <td>2.032094</td>\n",
       "      <td>2.513980</td>\n",
       "      <td>0.193468</td>\n",
       "      <td>0.155144</td>\n",
       "      <td>0.239347</td>\n",
       "      <td>0.178714</td>\n",
       "      <td>0.102228</td>\n",
       "      <td>0.377894</td>\n",
       "      <td>103.209411</td>\n",
       "      <td>151.397984</td>\n",
       "      <td>0.251524</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>8</td>\n",
       "      <td>0.200624</td>\n",
       "      <td>1.389927e-01</td>\n",
       "      <td>2.010384</td>\n",
       "      <td>2.387702</td>\n",
       "      <td>0.191401</td>\n",
       "      <td>0.143764</td>\n",
       "      <td>0.227325</td>\n",
       "      <td>0.169950</td>\n",
       "      <td>0.101136</td>\n",
       "      <td>0.479030</td>\n",
       "      <td>101.038370</td>\n",
       "      <td>138.770234</td>\n",
       "      <td>0.307701</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>9</td>\n",
       "      <td>0.300198</td>\n",
       "      <td>1.220508e-01</td>\n",
       "      <td>1.559730</td>\n",
       "      <td>2.113069</td>\n",
       "      <td>0.148496</td>\n",
       "      <td>0.130196</td>\n",
       "      <td>0.201178</td>\n",
       "      <td>0.156764</td>\n",
       "      <td>0.155308</td>\n",
       "      <td>0.634338</td>\n",
       "      <td>55.972952</td>\n",
       "      <td>111.306889</td>\n",
       "      <td>0.369300</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td>10</td>\n",
       "      <td>0.400021</td>\n",
       "      <td>1.068868e-01</td>\n",
       "      <td>1.177267</td>\n",
       "      <td>1.879544</td>\n",
       "      <td>0.112083</td>\n",
       "      <td>0.114437</td>\n",
       "      <td>0.178945</td>\n",
       "      <td>0.146202</td>\n",
       "      <td>0.117519</td>\n",
       "      <td>0.751857</td>\n",
       "      <td>17.726673</td>\n",
       "      <td>87.954405</td>\n",
       "      <td>0.388858</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td>11</td>\n",
       "      <td>0.500073</td>\n",
       "      <td>9.276531e-02</td>\n",
       "      <td>0.888573</td>\n",
       "      <td>1.681276</td>\n",
       "      <td>0.084598</td>\n",
       "      <td>0.099871</td>\n",
       "      <td>0.160068</td>\n",
       "      <td>0.136932</td>\n",
       "      <td>0.088903</td>\n",
       "      <td>0.840760</td>\n",
       "      <td>-11.142747</td>\n",
       "      <td>68.127556</td>\n",
       "      <td>0.376536</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td>12</td>\n",
       "      <td>0.600000</td>\n",
       "      <td>7.878372e-02</td>\n",
       "      <td>0.625182</td>\n",
       "      <td>1.505388</td>\n",
       "      <td>0.059521</td>\n",
       "      <td>0.085903</td>\n",
       "      <td>0.143323</td>\n",
       "      <td>0.128433</td>\n",
       "      <td>0.062473</td>\n",
       "      <td>0.903233</td>\n",
       "      <td>-37.481799</td>\n",
       "      <td>50.538809</td>\n",
       "      <td>0.335140</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>0.700655</td>\n",
       "      <td>6.354641e-02</td>\n",
       "      <td>0.379775</td>\n",
       "      <td>1.343684</td>\n",
       "      <td>0.036157</td>\n",
       "      <td>0.071252</td>\n",
       "      <td>0.127927</td>\n",
       "      <td>0.120219</td>\n",
       "      <td>0.038226</td>\n",
       "      <td>0.941459</td>\n",
       "      <td>-62.022487</td>\n",
       "      <td>34.368417</td>\n",
       "      <td>0.266143</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td>14</td>\n",
       "      <td>0.800021</td>\n",
       "      <td>4.695081e-02</td>\n",
       "      <td>0.265995</td>\n",
       "      <td>1.209831</td>\n",
       "      <td>0.025324</td>\n",
       "      <td>0.055471</td>\n",
       "      <td>0.115184</td>\n",
       "      <td>0.112177</td>\n",
       "      <td>0.026431</td>\n",
       "      <td>0.967890</td>\n",
       "      <td>-73.400525</td>\n",
       "      <td>20.983094</td>\n",
       "      <td>0.185533</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td>15</td>\n",
       "      <td>0.900010</td>\n",
       "      <td>2.647607e-02</td>\n",
       "      <td>0.155106</td>\n",
       "      <td>1.092653</td>\n",
       "      <td>0.014767</td>\n",
       "      <td>0.037191</td>\n",
       "      <td>0.104028</td>\n",
       "      <td>0.103846</td>\n",
       "      <td>0.015509</td>\n",
       "      <td>0.983399</td>\n",
       "      <td>-84.489431</td>\n",
       "      <td>9.265278</td>\n",
       "      <td>0.092163</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td>16</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>2.253538e-18</td>\n",
       "      <td>0.166029</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.015807</td>\n",
       "      <td>0.012998</td>\n",
       "      <td>0.095206</td>\n",
       "      <td>0.094762</td>\n",
       "      <td>0.016601</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>-83.397138</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "    group  cumulative_data_fraction  lower_threshold      lift  \\\n",
       "0       1                  0.010045     2.222380e-01  3.044491   \n",
       "1       2                  0.020589     2.044061e-01  3.066109   \n",
       "2       3                  0.030009     1.938378e-01  2.805569   \n",
       "3       4                  0.040033     1.868320e-01  3.116182   \n",
       "4       5                  0.050099     1.810878e-01  3.233514   \n",
       "5       6                  0.100010     1.618235e-01  2.455192   \n",
       "6       7                  0.150317     1.488313e-01  2.032094   \n",
       "7       8                  0.200624     1.389927e-01  2.010384   \n",
       "8       9                  0.300198     1.220508e-01  1.559730   \n",
       "9      10                  0.400021     1.068868e-01  1.177267   \n",
       "10     11                  0.500073     9.276531e-02  0.888573   \n",
       "11     12                  0.600000     7.878372e-02  0.625182   \n",
       "12     13                  0.700655     6.354641e-02  0.379775   \n",
       "13     14                  0.800021     4.695081e-02  0.265995   \n",
       "14     15                  0.900010     2.647607e-02  0.155106   \n",
       "15     16                  1.000000     2.253538e-18  0.166029   \n",
       "\n",
       "    cumulative_lift  response_rate     score  cumulative_response_rate  \\\n",
       "0          3.044491       0.289855  0.267096                  0.289855   \n",
       "1          3.055562       0.291913  0.211831                  0.290909   \n",
       "2          2.977082       0.267108  0.198511                  0.283437   \n",
       "3          3.011911       0.296680  0.190275                  0.286753   \n",
       "4          3.056434       0.307851  0.183875                  0.290992   \n",
       "5          2.756376       0.233750  0.170589                  0.262425   \n",
       "6          2.513980       0.193468  0.155144                  0.239347   \n",
       "7          2.387702       0.191401  0.143764                  0.227325   \n",
       "8          2.113069       0.148496  0.130196                  0.201178   \n",
       "9          1.879544       0.112083  0.114437                  0.178945   \n",
       "10         1.681276       0.084598  0.099871                  0.160068   \n",
       "11         1.505388       0.059521  0.085903                  0.143323   \n",
       "12         1.343684       0.036157  0.071252                  0.127927   \n",
       "13         1.209831       0.025324  0.055471                  0.115184   \n",
       "14         1.092653       0.014767  0.037191                  0.104028   \n",
       "15         1.000000       0.015807  0.012998                  0.095206   \n",
       "\n",
       "    cumulative_score  capture_rate  cumulative_capture_rate        gain  \\\n",
       "0           0.267096      0.030581                 0.030581  204.449130   \n",
       "1           0.238794      0.032329                 0.062910  206.610899   \n",
       "2           0.226148      0.026431                 0.089340  180.556930   \n",
       "3           0.217166      0.031236                 0.120577  211.618212   \n",
       "4           0.210477      0.032547                 0.153124  223.351395   \n",
       "5           0.190570      0.122543                 0.275666  145.519195   \n",
       "6           0.178714      0.102228                 0.377894  103.209411   \n",
       "7           0.169950      0.101136                 0.479030  101.038370   \n",
       "8           0.156764      0.155308                 0.634338   55.972952   \n",
       "9           0.146202      0.117519                 0.751857   17.726673   \n",
       "10          0.136932      0.088903                 0.840760  -11.142747   \n",
       "11          0.128433      0.062473                 0.903233  -37.481799   \n",
       "12          0.120219      0.038226                 0.941459  -62.022487   \n",
       "13          0.112177      0.026431                 0.967890  -73.400525   \n",
       "14          0.103846      0.015509                 0.983399  -84.489431   \n",
       "15          0.094762      0.016601                 1.000000  -83.397138   \n",
       "\n",
       "    cumulative_gain  kolmogorov_smirnov  \n",
       "0        204.449130            0.022697  \n",
       "1        205.556217            0.046774  \n",
       "2        197.708208            0.065574  \n",
       "3        201.191129            0.089019  \n",
       "4        205.643420            0.113866  \n",
       "5        175.637568            0.194139  \n",
       "6        151.397984            0.251524  \n",
       "7        138.770234            0.307701  \n",
       "8        111.306889            0.369300  \n",
       "9         87.954405            0.388858  \n",
       "10        68.127556            0.376536  \n",
       "11        50.538809            0.335140  \n",
       "12        34.368417            0.266143  \n",
       "13        20.983094            0.185533  \n",
       "14         9.265278            0.092163  \n",
       "15         0.000000            0.000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "\n",
      "Scoring History: \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th>timestamp</th>\n",
       "      <th>duration</th>\n",
       "      <th>iteration</th>\n",
       "      <th>lambda</th>\n",
       "      <th>predictors</th>\n",
       "      <th>deviance_train</th>\n",
       "      <th>deviance_test</th>\n",
       "      <th>alpha</th>\n",
       "      <th>iterations</th>\n",
       "      <th>...</th>\n",
       "      <th>training_pr_auc</th>\n",
       "      <th>training_lift</th>\n",
       "      <th>training_classification_error</th>\n",
       "      <th>validation_rmse</th>\n",
       "      <th>validation_logloss</th>\n",
       "      <th>validation_r2</th>\n",
       "      <th>validation_auc</th>\n",
       "      <th>validation_pr_auc</th>\n",
       "      <th>validation_lift</th>\n",
       "      <th>validation_classification_error</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:26</td>\n",
       "      <td>0.000 sec</td>\n",
       "      <td>1</td>\n",
       "      <td>.41E-1</td>\n",
       "      <td>1</td>\n",
       "      <td>0.638409</td>\n",
       "      <td>0.628894</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:26</td>\n",
       "      <td>0.040 sec</td>\n",
       "      <td>3</td>\n",
       "      <td>.38E-1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.633777</td>\n",
       "      <td>0.624362</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:26</td>\n",
       "      <td>0.073 sec</td>\n",
       "      <td>5</td>\n",
       "      <td>.34E-1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.627905</td>\n",
       "      <td>0.618716</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:26</td>\n",
       "      <td>0.104 sec</td>\n",
       "      <td>7</td>\n",
       "      <td>.31E-1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.622516</td>\n",
       "      <td>0.613542</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:26</td>\n",
       "      <td>0.148 sec</td>\n",
       "      <td>9</td>\n",
       "      <td>.29E-1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.617581</td>\n",
       "      <td>0.608812</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:26</td>\n",
       "      <td>0.182 sec</td>\n",
       "      <td>11</td>\n",
       "      <td>.26E-1</td>\n",
       "      <td>3</td>\n",
       "      <td>0.613074</td>\n",
       "      <td>0.604501</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:27</td>\n",
       "      <td>0.229 sec</td>\n",
       "      <td>13</td>\n",
       "      <td>.24E-1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.608870</td>\n",
       "      <td>0.600481</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:27</td>\n",
       "      <td>0.276 sec</td>\n",
       "      <td>15</td>\n",
       "      <td>.22E-1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.604970</td>\n",
       "      <td>0.596741</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:27</td>\n",
       "      <td>0.316 sec</td>\n",
       "      <td>17</td>\n",
       "      <td>.2E-1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.601479</td>\n",
       "      <td>0.593391</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>9</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:27</td>\n",
       "      <td>0.353 sec</td>\n",
       "      <td>19</td>\n",
       "      <td>.18E-1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.598284</td>\n",
       "      <td>0.590297</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>10</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:27</td>\n",
       "      <td>0.388 sec</td>\n",
       "      <td>21</td>\n",
       "      <td>.16E-1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.595212</td>\n",
       "      <td>0.587227</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>11</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:27</td>\n",
       "      <td>0.422 sec</td>\n",
       "      <td>23</td>\n",
       "      <td>.15E-1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.592306</td>\n",
       "      <td>0.584254</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:27</td>\n",
       "      <td>0.456 sec</td>\n",
       "      <td>25</td>\n",
       "      <td>.14E-1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.589707</td>\n",
       "      <td>0.581587</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>13</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:27</td>\n",
       "      <td>0.501 sec</td>\n",
       "      <td>27</td>\n",
       "      <td>.12E-1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.587379</td>\n",
       "      <td>0.579178</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>14</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:27</td>\n",
       "      <td>0.536 sec</td>\n",
       "      <td>29</td>\n",
       "      <td>.11E-1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.585308</td>\n",
       "      <td>0.577020</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>15</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:27</td>\n",
       "      <td>0.572 sec</td>\n",
       "      <td>31</td>\n",
       "      <td>.1E-1</td>\n",
       "      <td>4</td>\n",
       "      <td>0.583485</td>\n",
       "      <td>0.575107</td>\n",
       "      <td>0.99</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "      <td></td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>16</th>\n",
       "      <td></td>\n",
       "      <td>2022-06-01 20:31:27</td>\n",
       "      <td>0.934 sec</td>\n",
       "      <td>34</td>\n",
       "      <td>.71E-2</td>\n",
       "      <td>5</td>\n",
       "      <td>0.579999</td>\n",
       "      <td>0.571724</td>\n",
       "      <td>0.99</td>\n",
       "      <td>34.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0.224575</td>\n",
       "      <td>3.18102</td>\n",
       "      <td>0.249882</td>\n",
       "      <td>0.284656</td>\n",
       "      <td>0.285862</td>\n",
       "      <td>0.0593558</td>\n",
       "      <td>0.753815</td>\n",
       "      <td>0.217496</td>\n",
       "      <td>3.04449</td>\n",
       "      <td>0.202329</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>17 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "                timestamp    duration  iteration  lambda  predictors  \\\n",
       "0     2022-06-01 20:31:26   0.000 sec          1  .41E-1           1   \n",
       "1     2022-06-01 20:31:26   0.040 sec          3  .38E-1           3   \n",
       "2     2022-06-01 20:31:26   0.073 sec          5  .34E-1           3   \n",
       "3     2022-06-01 20:31:26   0.104 sec          7  .31E-1           3   \n",
       "4     2022-06-01 20:31:26   0.148 sec          9  .29E-1           3   \n",
       "5     2022-06-01 20:31:26   0.182 sec         11  .26E-1           3   \n",
       "6     2022-06-01 20:31:27   0.229 sec         13  .24E-1           4   \n",
       "7     2022-06-01 20:31:27   0.276 sec         15  .22E-1           4   \n",
       "8     2022-06-01 20:31:27   0.316 sec         17   .2E-1           4   \n",
       "9     2022-06-01 20:31:27   0.353 sec         19  .18E-1           4   \n",
       "10    2022-06-01 20:31:27   0.388 sec         21  .16E-1           4   \n",
       "11    2022-06-01 20:31:27   0.422 sec         23  .15E-1           4   \n",
       "12    2022-06-01 20:31:27   0.456 sec         25  .14E-1           4   \n",
       "13    2022-06-01 20:31:27   0.501 sec         27  .12E-1           4   \n",
       "14    2022-06-01 20:31:27   0.536 sec         29  .11E-1           4   \n",
       "15    2022-06-01 20:31:27   0.572 sec         31   .1E-1           4   \n",
       "16    2022-06-01 20:31:27   0.934 sec         34  .71E-2           5   \n",
       "\n",
       "    deviance_train  deviance_test  alpha  iterations  ... training_pr_auc  \\\n",
       "0         0.638409       0.628894   0.99         NaN  ...                   \n",
       "1         0.633777       0.624362   0.99         NaN  ...                   \n",
       "2         0.627905       0.618716   0.99         NaN  ...                   \n",
       "3         0.622516       0.613542   0.99         NaN  ...                   \n",
       "4         0.617581       0.608812   0.99         NaN  ...                   \n",
       "5         0.613074       0.604501   0.99         NaN  ...                   \n",
       "6         0.608870       0.600481   0.99         NaN  ...                   \n",
       "7         0.604970       0.596741   0.99         NaN  ...                   \n",
       "8         0.601479       0.593391   0.99         NaN  ...                   \n",
       "9         0.598284       0.590297   0.99         NaN  ...                   \n",
       "10        0.595212       0.587227   0.99         NaN  ...                   \n",
       "11        0.592306       0.584254   0.99         NaN  ...                   \n",
       "12        0.589707       0.581587   0.99         NaN  ...                   \n",
       "13        0.587379       0.579178   0.99         NaN  ...                   \n",
       "14        0.585308       0.577020   0.99         NaN  ...                   \n",
       "15        0.583485       0.575107   0.99         NaN  ...                   \n",
       "16        0.579999       0.571724   0.99        34.0  ...        0.224575   \n",
       "\n",
       "   training_lift training_classification_error validation_rmse  \\\n",
       "0                                                                \n",
       "1                                                                \n",
       "2                                                                \n",
       "3                                                                \n",
       "4                                                                \n",
       "5                                                                \n",
       "6                                                                \n",
       "7                                                                \n",
       "8                                                                \n",
       "9                                                                \n",
       "10                                                               \n",
       "11                                                               \n",
       "12                                                               \n",
       "13                                                               \n",
       "14                                                               \n",
       "15                                                               \n",
       "16       3.18102                      0.249882        0.284656   \n",
       "\n",
       "   validation_logloss validation_r2 validation_auc validation_pr_auc  \\\n",
       "0                                                                      \n",
       "1                                                                      \n",
       "2                                                                      \n",
       "3                                                                      \n",
       "4                                                                      \n",
       "5                                                                      \n",
       "6                                                                      \n",
       "7                                                                      \n",
       "8                                                                      \n",
       "9                                                                      \n",
       "10                                                                     \n",
       "11                                                                     \n",
       "12                                                                     \n",
       "13                                                                     \n",
       "14                                                                     \n",
       "15                                                                     \n",
       "16           0.285862     0.0593558       0.753815          0.217496   \n",
       "\n",
       "   validation_lift validation_classification_error  \n",
       "0                                                   \n",
       "1                                                   \n",
       "2                                                   \n",
       "3                                                   \n",
       "4                                                   \n",
       "5                                                   \n",
       "6                                                   \n",
       "7                                                   \n",
       "8                                                   \n",
       "9                                                   \n",
       "10                                                  \n",
       "11                                                  \n",
       "12                                                  \n",
       "13                                                  \n",
       "14                                                  \n",
       "15                                                  \n",
       "16         3.04449                        0.202329  \n",
       "\n",
       "[17 rows x 24 columns]"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\n",
      "Variable Importances: \n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>variable</th>\n",
       "      <th>relative_importance</th>\n",
       "      <th>scaled_importance</th>\n",
       "      <th>percentage</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>property_value_std</td>\n",
       "      <td>0.922198</td>\n",
       "      <td>1.000000</td>\n",
       "      <td>0.625650</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>debt_to_income_ratio_std</td>\n",
       "      <td>0.331101</td>\n",
       "      <td>0.359035</td>\n",
       "      <td>0.224630</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>loan_to_value_ratio_std</td>\n",
       "      <td>0.207438</td>\n",
       "      <td>0.224939</td>\n",
       "      <td>0.140733</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>term_360</td>\n",
       "      <td>0.013247</td>\n",
       "      <td>0.014364</td>\n",
       "      <td>0.008987</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>conforming</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>loan_amount_std</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>6</th>\n",
       "      <td>no_intro_rate_period_std</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>7</th>\n",
       "      <td>intro_rate_period_std</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>8</th>\n",
       "      <td>income_std</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "      <td>0.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "                   variable  relative_importance  scaled_importance  \\\n",
       "0        property_value_std             0.922198           1.000000   \n",
       "1  debt_to_income_ratio_std             0.331101           0.359035   \n",
       "2   loan_to_value_ratio_std             0.207438           0.224939   \n",
       "3                  term_360             0.013247           0.014364   \n",
       "4                conforming             0.000000           0.000000   \n",
       "5           loan_amount_std             0.000000           0.000000   \n",
       "6  no_intro_rate_period_std             0.000000           0.000000   \n",
       "7     intro_rate_period_std             0.000000           0.000000   \n",
       "8                income_std             0.000000           0.000000   \n",
       "\n",
       "   percentage  \n",
       "0    0.625650  \n",
       "1    0.224630  \n",
       "2    0.140733  \n",
       "3    0.008987  \n",
       "4    0.000000  \n",
       "5    0.000000  \n",
       "6    0.000000  \n",
       "7    0.000000  \n",
       "8    0.000000  "
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    },
    {
     "data": {
      "text/plain": []
     },
     "execution_count": 13,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_glm"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "Cf6rH3yKDe5u"
   },
   "source": [
    "Basic AUC assessment\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "ucORPSpODfUN",
    "outputId": "974b765b-680b-4f22-807b-527111146c4f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation AUC: 0.7538.\n"
     ]
    }
   ],
   "source": [
    "print('Validation AUC: %.4f.' % best_glm.auc(valid=True))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Score validation data with model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>row_id</th>\n",
       "      <th>black</th>\n",
       "      <th>asian</th>\n",
       "      <th>white</th>\n",
       "      <th>amind</th>\n",
       "      <th>hipac</th>\n",
       "      <th>hispanic</th>\n",
       "      <th>non_hispanic</th>\n",
       "      <th>male</th>\n",
       "      <th>female</th>\n",
       "      <th>...</th>\n",
       "      <th>debt_to_income_ratio_missing</th>\n",
       "      <th>loan_amount_std</th>\n",
       "      <th>loan_to_value_ratio_std</th>\n",
       "      <th>no_intro_rate_period_std</th>\n",
       "      <th>intro_rate_period_std</th>\n",
       "      <th>property_value_std</th>\n",
       "      <th>income_std</th>\n",
       "      <th>debt_to_income_ratio_std</th>\n",
       "      <th>high_priced</th>\n",
       "      <th>phat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.514393</td>\n",
       "      <td>0.333922</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.535932</td>\n",
       "      <td>-0.040307</td>\n",
       "      <td>0.854601</td>\n",
       "      <td>0</td>\n",
       "      <td>0.158336</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.426448</td>\n",
       "      <td>0.355249</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.474263</td>\n",
       "      <td>-0.020904</td>\n",
       "      <td>1.037419</td>\n",
       "      <td>0</td>\n",
       "      <td>0.159289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.277109</td>\n",
       "      <td>0.142995</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>0.111598</td>\n",
       "      <td>-0.019865</td>\n",
       "      <td>0.031916</td>\n",
       "      <td>0</td>\n",
       "      <td>0.070368</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.382476</td>\n",
       "      <td>-0.240432</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.320089</td>\n",
       "      <td>-0.028181</td>\n",
       "      <td>0.946010</td>\n",
       "      <td>0</td>\n",
       "      <td>0.124670</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.101220</td>\n",
       "      <td>-0.266529</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>0.111598</td>\n",
       "      <td>0.016515</td>\n",
       "      <td>-1.156406</td>\n",
       "      <td>0</td>\n",
       "      <td>0.045170</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   row_id  black  asian  white  amind  hipac  hispanic  non_hispanic  male  \\\n",
       "0       0    NaN    NaN    NaN    NaN    NaN       NaN           NaN   1.0   \n",
       "1       6    0.0    0.0    1.0    0.0    0.0       0.0           1.0   0.0   \n",
       "2       8    0.0    0.0    1.0    0.0    0.0       0.0           1.0   NaN   \n",
       "3      10    0.0    0.0    1.0    0.0    0.0       0.0           1.0   NaN   \n",
       "4      11    0.0    0.0    1.0    0.0    0.0       1.0           0.0   NaN   \n",
       "\n",
       "   female  ...  debt_to_income_ratio_missing  loan_amount_std  \\\n",
       "0     0.0  ...                             0        -0.514393   \n",
       "1     1.0  ...                             0        -0.426448   \n",
       "2     NaN  ...                             0         0.277109   \n",
       "3     NaN  ...                             0        -0.382476   \n",
       "4     NaN  ...                             0         0.101220   \n",
       "\n",
       "   loan_to_value_ratio_std  no_intro_rate_period_std  intro_rate_period_std  \\\n",
       "0                 0.333922                  0.244394              -0.215304   \n",
       "1                 0.355249                  0.244394              -0.215304   \n",
       "2                 0.142995                  0.244394              -0.215304   \n",
       "3                -0.240432                  0.244394              -0.215304   \n",
       "4                -0.266529                  0.244394              -0.215304   \n",
       "\n",
       "   property_value_std  income_std  debt_to_income_ratio_std  high_priced  \\\n",
       "0           -0.535932   -0.040307                  0.854601            0   \n",
       "1           -0.474263   -0.020904                  1.037419            0   \n",
       "2            0.111598   -0.019865                  0.031916            0   \n",
       "3           -0.320089   -0.028181                  0.946010            0   \n",
       "4            0.111598    0.016515                 -1.156406            0   \n",
       "\n",
       "       phat  \n",
       "0  0.158336  \n",
       "1  0.159289  \n",
       "2  0.070368  \n",
       "3  0.124670  \n",
       "4  0.045170  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_glm_phat = best_glm.predict(hvalid).as_data_frame() \n",
    "best_glm_phat.drop(['predict', 'p0'], axis=1, inplace=True)\n",
    "best_glm_phat.columns = ['phat']\n",
    "best_glm_phat = pd.concat([valid.reset_index(drop=True), best_glm_phat], axis=1)\n",
    "best_glm_phat.head()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Utility function for selecting percentiles\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "metadata": {},
   "outputs": [],
   "source": [
    "def get_percentile_dict(yhat_name, frame, id_):\n",
    "\n",
    "    \"\"\" Returns the percentiles of a column, yhat_name, as the indices based on\n",
    "        another column id_.\n",
    "        :param yhat_name: Name of column in frame in which to find percentiles.\n",
    "        :param frame: Pandas frame.\n",
    "        :param id_: Validation Pandas frame containing yhat and id_.\n",
    "        :return: Dictionary of percentile values and index column values.\n",
    "    \"\"\"\n",
    "\n",
    "    # create a copy of frame and sort it by yhat\n",
    "    sort_df = frame.copy(deep=True)\n",
    "    sort_df.sort_values(yhat_name, inplace=True)\n",
    "    sort_df.reset_index(inplace=True)\n",
    "\n",
    "    # find top and bottom percentiles\n",
    "    percentiles_dict = {0: sort_df.loc[0, id_], 99: sort_df.loc[sort_df.shape[0] - 1, id_]}\n",
    "\n",
    "    # find 10th-90th percentiles\n",
    "    inc = sort_df.shape[0] // 10\n",
    "    for i in range(1, 10):\n",
    "        percentiles_dict[i * 10] = sort_df.loc[i * inc, id_]\n",
    "\n",
    "    return percentiles_dict\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Select percentiles from predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0: 152878\n",
      "10: 154185\n",
      "20: 74908\n",
      "30: 37440\n",
      "40: 138502\n",
      "50: 78582\n",
      "60: 139677\n",
      "70: 156880\n",
      "80: 26748\n",
      "90: 95570\n",
      "99: 46601\n"
     ]
    }
   ],
   "source": [
    "best_glm_percentiles = get_percentile_dict('phat', best_glm_phat, 'row_id')\n",
    "for key in sorted(best_glm_percentiles.keys()):\n",
    "    print(str(key) + ': ' + str(best_glm_percentiles[key]))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Collect global feature importance info\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [],
   "source": [
    "# use coefficients as relative global feature importance\n",
    "global_fi = pd.DataFrame.from_dict(best_glm.coef(), columns=['GLM Importance'], orient='index')\n",
    "global_fi.drop('Intercept', inplace=True)\n",
    "global_fi['GLM Importance'] = np.abs(global_fi['GLM Importance'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Collect local feature importance info\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "metadata": {},
   "outputs": [],
   "source": [
    "# use (coefficient * value) as local feature importance\n",
    "\n",
    "# init frame to store local contribs\n",
    "local_fi_dict = {10: pd.DataFrame(columns = ['GLM Contribution'], index=x_names),\n",
    "                 50: pd.DataFrame(columns = ['GLM Contribution'], index=x_names),\n",
    "                 90: pd.DataFrame(columns = ['GLM Contribution'], index=x_names)}\n",
    "\n",
    "# get (coefficient * value) at three percentiles of phat\n",
    "for name in x_names:\n",
    "    for percentile in [10, 50, 90]:\n",
    "    \n",
    "        # local contributions = beta_j * x_i,j\n",
    "        local_fi_dict[percentile].loc[name, 'GLM Contribution'] =\\\n",
    "            best_glm.coef()[name] *\\\n",
    "            valid[valid['row_id'] == int(best_glm_percentiles[percentile])][name].values[0]\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "3KNi0BDtDrX1"
   },
   "source": [
    "Monotonic XGBoost\n",
    "\n",
    "Define utility function for random grid search\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {
    "id": "4vcqpNQVDtH5"
   },
   "outputs": [],
   "source": [
    "def xgb_grid(dtrain, dvalid, mono_constraints=None, gs_params=None, n_models=None,\n",
    "             ntree=None, early_stopping_rounds=None, verbose=False, seed=None):\n",
    "    \n",
    "    \"\"\" Performs a random grid search over n_models and gs_params.\n",
    "\n",
    "    :param dtrain: Training data in LightSVM format.\n",
    "    :param dvalid: Validation data in LightSVM format.\n",
    "    :param mono_constraints: User-supplied monotonicity constraints.\n",
    "    :param gs_params: Dictionary of lists of potential XGBoost parameters over which to search.\n",
    "    :param n_models: Number of random models to evaluate.\n",
    "    :param ntree: Number of trees in XGBoost model.\n",
    "    :param early_stopping_rounds: XGBoost early stopping rounds.\n",
    "    :param verbose: Whether to display training iterations, default False.\n",
    "    :param seed: Random seed for better interpretability.\n",
    "    :return: Best candidate model from random grid search.\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    # cartesian product of gs_params\n",
    "    keys, values = zip(*gs_params.items())\n",
    "    experiments = [dict(zip(keys, v)) for v in itertools.product(*values)]\n",
    "\n",
    "    # preserve exact reproducibility for this function\n",
    "    np.random.seed(SEED) \n",
    "    \n",
    "    # select randomly from cartesian product space\n",
    "    selected_experiments = np.random.choice(len(experiments), n_models)\n",
    "\n",
    "    # set global params for objective,  etc.\n",
    "    params = {'booster': 'gbtree',\n",
    "              'eval_metric': 'auc',\n",
    "              'nthread': NTHREAD,\n",
    "              'objective': 'binary:logistic',\n",
    "              'seed': SEED}\n",
    "\n",
    "    # init grid search loop\n",
    "    best_candidate = None\n",
    "    best_score = 0\n",
    "\n",
    "    # grid search loop\n",
    "    for i, exp in enumerate(selected_experiments):\n",
    "\n",
    "        params.update(experiments[exp])  # override global params with current grid run params\n",
    "\n",
    "        print('Grid search run %d/%d:' % (int(i + 1), int(n_models)))\n",
    "        print('Training with parameters:', params)\n",
    "\n",
    "        # train on current params\n",
    "        watchlist = [(dtrain, 'train'), (dvalid, 'eval')]\n",
    "        \n",
    "        if mono_constraints is not None:\n",
    "            params['monotone_constraints'] = mono_constraints\n",
    "        \n",
    "        candidate = xgb.train(params,\n",
    "                              dtrain,\n",
    "                              ntree,\n",
    "                              early_stopping_rounds=early_stopping_rounds,\n",
    "                              evals=watchlist,\n",
    "                              verbose_eval=verbose)    \n",
    "\n",
    "        # determine if current model is better than previous best\n",
    "        if candidate.best_score > best_score:\n",
    "            best_candidate = candidate\n",
    "            best_score = candidate.best_score\n",
    "            print('Grid search new best score discovered at iteration %d/%d: %.4f.' %\n",
    "                             (int(i + 1), int(n_models), candidate.best_score))\n",
    "\n",
    "        print('---------- ----------')\n",
    "            \n",
    "    return best_candidate\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "mY-E3tO9Dw-B"
   },
   "source": [
    "Fit monotonic XGBoost with random grid search\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {
    "colab": {
     "background_save": true,
     "base_uri": "https://localhost:8080/"
    },
    "id": "CjtlXCYVDvah",
    "outputId": "6bab80b8-6539-43eb-fa03-460c0d05f2a8"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grid search run 1/10:\n",
      "Training with parameters: {'booster': 'gbtree', 'eval_metric': 'auc', 'nthread': 4, 'objective': 'binary:logistic', 'seed': 12345, 'colsample_bytree': 0.9, 'colsample_bylevel': 0.9, 'eta': 0.5, 'max_depth': 7, 'reg_alpha': 0.0005, 'reg_lambda': 0.005, 'subsample': 0.3, 'min_child_weight': 5, 'gamma': 0.0}\n",
      "Grid search new best score discovered at iteration 1/10: 0.8065.\n",
      "---------- ----------\n",
      "Grid search run 2/10:\n",
      "Training with parameters: {'booster': 'gbtree', 'eval_metric': 'auc', 'nthread': 4, 'objective': 'binary:logistic', 'seed': 12345, 'colsample_bytree': 0.3, 'colsample_bylevel': 0.3, 'eta': 0.05, 'max_depth': 5, 'reg_alpha': 0.0005, 'reg_lambda': 0.0005, 'subsample': 0.5, 'min_child_weight': 1, 'gamma': 0.2, 'monotone_constraints': (1, 1, 1, 1, -1, 0, -1, 0)}\n",
      "Grid search new best score discovered at iteration 2/10: 0.8079.\n",
      "---------- ----------\n",
      "Grid search run 3/10:\n",
      "Training with parameters: {'booster': 'gbtree', 'eval_metric': 'auc', 'nthread': 4, 'objective': 'binary:logistic', 'seed': 12345, 'colsample_bytree': 0.3, 'colsample_bylevel': 0.3, 'eta': 0.5, 'max_depth': 5, 'reg_alpha': 0.005, 'reg_lambda': 0.05, 'subsample': 0.3, 'min_child_weight': 10, 'gamma': 0.4, 'monotone_constraints': (1, 1, 1, 1, -1, 0, -1, 0)}\n",
      "---------- ----------\n",
      "Grid search run 4/10:\n",
      "Training with parameters: {'booster': 'gbtree', 'eval_metric': 'auc', 'nthread': 4, 'objective': 'binary:logistic', 'seed': 12345, 'colsample_bytree': 0.5, 'colsample_bylevel': 0.5, 'eta': 0.5, 'max_depth': 3, 'reg_alpha': 0.05, 'reg_lambda': 0.005, 'subsample': 0.9, 'min_child_weight': 1, 'gamma': 0.0, 'monotone_constraints': (1, 1, 1, 1, -1, 0, -1, 0)}\n",
      "Grid search new best score discovered at iteration 4/10: 0.8091.\n",
      "---------- ----------\n",
      "Grid search run 5/10:\n",
      "Training with parameters: {'booster': 'gbtree', 'eval_metric': 'auc', 'nthread': 4, 'objective': 'binary:logistic', 'seed': 12345, 'colsample_bytree': 0.3, 'colsample_bylevel': 0.9, 'eta': 0.05, 'max_depth': 5, 'reg_alpha': 0.005, 'reg_lambda': 0.0005, 'subsample': 0.3, 'min_child_weight': 10, 'gamma': 0.0, 'monotone_constraints': (1, 1, 1, 1, -1, 0, -1, 0)}\n",
      "---------- ----------\n",
      "Grid search run 6/10:\n",
      "Training with parameters: {'booster': 'gbtree', 'eval_metric': 'auc', 'nthread': 4, 'objective': 'binary:logistic', 'seed': 12345, 'colsample_bytree': 0.7, 'colsample_bylevel': 0.5, 'eta': 0.5, 'max_depth': 5, 'reg_alpha': 0.005, 'reg_lambda': 0.05, 'subsample': 0.9, 'min_child_weight': 5, 'gamma': 0.3, 'monotone_constraints': (1, 1, 1, 1, -1, 0, -1, 0)}\n",
      "---------- ----------\n",
      "Grid search run 7/10:\n",
      "Training with parameters: {'booster': 'gbtree', 'eval_metric': 'auc', 'nthread': 4, 'objective': 'binary:logistic', 'seed': 12345, 'colsample_bytree': 0.5, 'colsample_bylevel': 0.5, 'eta': 0.5, 'max_depth': 3, 'reg_alpha': 0.005, 'reg_lambda': 0.0005, 'subsample': 0.9, 'min_child_weight': 1, 'gamma': 0.1, 'monotone_constraints': (1, 1, 1, 1, -1, 0, -1, 0)}\n",
      "Grid search new best score discovered at iteration 7/10: 0.8092.\n",
      "---------- ----------\n",
      "Grid search run 8/10:\n",
      "Training with parameters: {'booster': 'gbtree', 'eval_metric': 'auc', 'nthread': 4, 'objective': 'binary:logistic', 'seed': 12345, 'colsample_bytree': 0.7, 'colsample_bylevel': 0.7, 'eta': 0.5, 'max_depth': 5, 'reg_alpha': 0.005, 'reg_lambda': 0.0005, 'subsample': 0.7, 'min_child_weight': 1, 'gamma': 0.3, 'monotone_constraints': (1, 1, 1, 1, -1, 0, -1, 0)}\n",
      "---------- ----------\n",
      "Grid search run 9/10:\n",
      "Training with parameters: {'booster': 'gbtree', 'eval_metric': 'auc', 'nthread': 4, 'objective': 'binary:logistic', 'seed': 12345, 'colsample_bytree': 0.7, 'colsample_bylevel': 0.3, 'eta': 0.005, 'max_depth': 7, 'reg_alpha': 0.005, 'reg_lambda': 0.005, 'subsample': 0.9, 'min_child_weight': 5, 'gamma': 0.1, 'monotone_constraints': (1, 1, 1, 1, -1, 0, -1, 0)}\n",
      "---------- ----------\n",
      "Grid search run 10/10:\n",
      "Training with parameters: {'booster': 'gbtree', 'eval_metric': 'auc', 'nthread': 4, 'objective': 'binary:logistic', 'seed': 12345, 'colsample_bytree': 0.3, 'colsample_bylevel': 0.5, 'eta': 0.05, 'max_depth': 3, 'reg_alpha': 0.005, 'reg_lambda': 0.05, 'subsample': 0.5, 'min_child_weight': 1, 'gamma': 0.3, 'monotone_constraints': (1, 1, 1, 1, -1, 0, -1, 0)}\n",
      "---------- ----------\n",
      "Monotonic GBM training completed in 163.95 s.\n"
     ]
    }
   ],
   "source": [
    "# dictionary of hyperparameter value lists for grid search\n",
    "gs_params = {'colsample_bytree': [0.3, 0.5, 0.7, 0.9],\n",
    "             'colsample_bylevel': [0.3, 0.5, 0.7, 0.9],\n",
    "             'eta': [0.005, 0.05, 0.5],\n",
    "             'max_depth': [3, 5, 7],\n",
    "             'reg_alpha': [0.0005, 0.005, 0.05],\n",
    "             'reg_lambda': [0.0005, 0.005, 0.05],\n",
    "             'subsample': [0.3, 0.5, 0.7, 0.9],\n",
    "             'min_child_weight': [1, 5, 10], \n",
    "             'gamma': [0.0, 0.1, 0.2 , 0.3, 0.4]}\n",
    "\n",
    "\n",
    "\n",
    "# define monotonicity constraints\n",
    "#mono_constraints = tuple([int(i) for i in np.sign(train[x_names + [y_name]].corr()[y_name].values[:-1])])\n",
    "mono_constraints = (1, 1, 1, 1, -1, 0, -1, 0)\n",
    "\n",
    "# start local timer\n",
    "mxgb_tic = time.time()\n",
    "\n",
    "# Convert data to SVMLight format\n",
    "dtrain = xgb.DMatrix(train[x_names], train[y_name])\n",
    "dvalid = xgb.DMatrix(valid[x_names], valid[y_name])\n",
    "\n",
    "# Monotonic XGBoost grid search\n",
    "best_mxgb = xgb_grid(dtrain, dvalid, gs_params=gs_params, n_models=10, ntree=1000, early_stopping_rounds=100, \n",
    "                     mono_constraints=mono_constraints, seed=SEED)\n",
    "\n",
    "# end local timer\n",
    "mxgb_toc = time.time() - mxgb_tic\n",
    "print('Monotonic GBM training completed in %.2f s.' % (mxgb_toc))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "4-7pvrHZD3XZ"
   },
   "source": [
    "Basic AUC assessment\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "19-mIU7_D6pV",
    "outputId": "453ccecb-da48-44ba-f6b3-91778874722a"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation AUC: 0.8092.\n"
     ]
    }
   ],
   "source": [
    "print('Validation AUC: %.4f.' % best_mxgb.best_score)\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Score validation data with model\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>row_id</th>\n",
       "      <th>black</th>\n",
       "      <th>asian</th>\n",
       "      <th>white</th>\n",
       "      <th>amind</th>\n",
       "      <th>hipac</th>\n",
       "      <th>hispanic</th>\n",
       "      <th>non_hispanic</th>\n",
       "      <th>male</th>\n",
       "      <th>female</th>\n",
       "      <th>...</th>\n",
       "      <th>debt_to_income_ratio_missing</th>\n",
       "      <th>loan_amount_std</th>\n",
       "      <th>loan_to_value_ratio_std</th>\n",
       "      <th>no_intro_rate_period_std</th>\n",
       "      <th>intro_rate_period_std</th>\n",
       "      <th>property_value_std</th>\n",
       "      <th>income_std</th>\n",
       "      <th>debt_to_income_ratio_std</th>\n",
       "      <th>high_priced</th>\n",
       "      <th>phat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.514393</td>\n",
       "      <td>0.333922</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.535932</td>\n",
       "      <td>-0.040307</td>\n",
       "      <td>0.854601</td>\n",
       "      <td>0</td>\n",
       "      <td>0.170881</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.426448</td>\n",
       "      <td>0.355249</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.474263</td>\n",
       "      <td>-0.020904</td>\n",
       "      <td>1.037419</td>\n",
       "      <td>0</td>\n",
       "      <td>0.272879</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.277109</td>\n",
       "      <td>0.142995</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>0.111598</td>\n",
       "      <td>-0.019865</td>\n",
       "      <td>0.031916</td>\n",
       "      <td>0</td>\n",
       "      <td>0.026078</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.382476</td>\n",
       "      <td>-0.240432</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.320089</td>\n",
       "      <td>-0.028181</td>\n",
       "      <td>0.946010</td>\n",
       "      <td>0</td>\n",
       "      <td>0.023510</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.101220</td>\n",
       "      <td>-0.266529</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>0.111598</td>\n",
       "      <td>0.016515</td>\n",
       "      <td>-1.156406</td>\n",
       "      <td>0</td>\n",
       "      <td>0.006208</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   row_id  black  asian  white  amind  hipac  hispanic  non_hispanic  male  \\\n",
       "0       0    NaN    NaN    NaN    NaN    NaN       NaN           NaN   1.0   \n",
       "1       6    0.0    0.0    1.0    0.0    0.0       0.0           1.0   0.0   \n",
       "2       8    0.0    0.0    1.0    0.0    0.0       0.0           1.0   NaN   \n",
       "3      10    0.0    0.0    1.0    0.0    0.0       0.0           1.0   NaN   \n",
       "4      11    0.0    0.0    1.0    0.0    0.0       1.0           0.0   NaN   \n",
       "\n",
       "   female  ...  debt_to_income_ratio_missing  loan_amount_std  \\\n",
       "0     0.0  ...                             0        -0.514393   \n",
       "1     1.0  ...                             0        -0.426448   \n",
       "2     NaN  ...                             0         0.277109   \n",
       "3     NaN  ...                             0        -0.382476   \n",
       "4     NaN  ...                             0         0.101220   \n",
       "\n",
       "   loan_to_value_ratio_std  no_intro_rate_period_std  intro_rate_period_std  \\\n",
       "0                 0.333922                  0.244394              -0.215304   \n",
       "1                 0.355249                  0.244394              -0.215304   \n",
       "2                 0.142995                  0.244394              -0.215304   \n",
       "3                -0.240432                  0.244394              -0.215304   \n",
       "4                -0.266529                  0.244394              -0.215304   \n",
       "\n",
       "   property_value_std  income_std  debt_to_income_ratio_std  high_priced  \\\n",
       "0           -0.535932   -0.040307                  0.854601            0   \n",
       "1           -0.474263   -0.020904                  1.037419            0   \n",
       "2            0.111598   -0.019865                  0.031916            0   \n",
       "3           -0.320089   -0.028181                  0.946010            0   \n",
       "4            0.111598    0.016515                 -1.156406            0   \n",
       "\n",
       "       phat  \n",
       "0  0.170881  \n",
       "1  0.272879  \n",
       "2  0.026078  \n",
       "3  0.023510  \n",
       "4  0.006208  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_mxgb_phat = pd.DataFrame(best_mxgb.predict(dvalid, iteration_range=(0, best_mxgb.best_ntree_limit)), columns=['phat']) \n",
    "best_mxgb_phat = pd.concat([valid.reset_index(drop=True), best_mxgb_phat], axis=1)\n",
    "best_mxgb_phat.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Select percentiles from predictions\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 25,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0: 48081\n",
      "10: 76614\n",
      "20: 99189\n",
      "30: 60401\n",
      "40: 38717\n",
      "50: 39606\n",
      "60: 8508\n",
      "70: 32893\n",
      "80: 21188\n",
      "90: 103682\n",
      "99: 151812\n"
     ]
    }
   ],
   "source": [
    "best_mxgb_percentiles = get_percentile_dict('phat', best_mxgb_phat, 'row_id')\n",
    "for key in sorted(best_mxgb_percentiles.keys()):\n",
    "    print(str(key) + ': ' + str(best_mxgb_percentiles[key]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate Shapley values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [],
   "source": [
    "shapley_contribs = best_mxgb.predict(dvalid, pred_contribs=True, iteration_range=(0, best_mxgb.best_ntree_limit))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Collect global feature importance info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "metadata": {},
   "outputs": [],
   "source": [
    "# use mean abs SHAP as feature importance\n",
    "shapley_contribs_df = pd.DataFrame(shapley_contribs, columns=x_names + ['intercept'])\n",
    "global_fi['MXGB Importance'] = np.abs(shapley_contribs_df.drop('intercept', axis=1)).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Collect local feature importance info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "metadata": {},
   "outputs": [],
   "source": [
    "# create mapping between validation row_id and Shapely array index values\n",
    "valid_idx_map = valid['row_id'].copy(deep=True)\n",
    "valid_idx_map.reset_index(drop=True, inplace=True)\n",
    "\n",
    "# collect SHAP values at three percentiles of phat\n",
    "for percentile in [10, 50, 90]:\n",
    "\n",
    "    # using valid_idx_map and percentiles dict\n",
    "    # to find the right local contributions\n",
    "    idx = valid_idx_map[valid_idx_map == int(best_mxgb_percentiles[percentile])].index[0]\n",
    "    s_df = pd.DataFrame(shapley_contribs[idx, :-1].T, columns=['MXGB Contribution'], index=x_names)\n",
    "    local_fi_dict[percentile]['MXGB Contribution'] = 0\n",
    "    local_fi_dict[percentile].update(s_df)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "YCwMavgCEA39"
   },
   "source": [
    "Explainable Boosting Machine\n",
    "\n",
    "Define utility function for random grid search\n",
    "\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "metadata": {
    "id": "hk-pr8TSESaM"
   },
   "outputs": [],
   "source": [
    "def ebm_grid(train, valid, x_names, y_name, gs_params=None, n_models=None, early_stopping_rounds=None, seed=None):\n",
    "    \n",
    "    \"\"\" Performs a random grid search over n_models and gs_params.\n",
    "\n",
    "    :param train: Training data as Pandas DataFrame.\n",
    "    :param valid: Validation data as Pandas DataFrame.\n",
    "    :param x_names: Names of input features.\n",
    "    :param y_name: Name of target feature.\n",
    "    :param gs_params: Dictionary of lists of potential EBM parameters over which to search.   \n",
    "    :param n_models: Number of random models to evaluate.\n",
    "    :param early_stopping_rounds: EBM early stopping rounds.\n",
    "    :param seed: Random seed for better interpretability.\n",
    "    :return: Best candidate model from random grid search.\n",
    "\n",
    "    \"\"\"\n",
    "\n",
    "    # cartesian product of gs_params\n",
    "    keys, values = zip(*gs_params.items())\n",
    "    experiments = [dict(zip(keys, v)) for v in itertools.product(*values)]\n",
    "\n",
    "    # preserve exact reproducibility for this function\n",
    "    np.random.seed(SEED) \n",
    "    \n",
    "    # select randomly from cartesian product space\n",
    "    selected_experiments = np.random.choice(len(experiments), n_models)\n",
    "\n",
    "    # set global params for seed, etc.\n",
    "    params = {'n_jobs': NTHREAD,\n",
    "              'early_stopping_rounds': early_stopping_rounds, \n",
    "              'random_state': SEED}\n",
    "\n",
    "    # init grid search loop\n",
    "    best_candidate = None\n",
    "    best_score = 0\n",
    "\n",
    "    # grid search loop\n",
    "    for i, exp in enumerate(selected_experiments):\n",
    "\n",
    "        params.update(experiments[exp])  # override global params with current grid run params\n",
    "\n",
    "        print('Grid search run %d/%d:' % (int(i + 1), int(n_models)))\n",
    "        print('Training with parameters:', params)\n",
    "        \n",
    "        # train \n",
    "        ebm = ExplainableBoostingClassifier(**params)\n",
    "        candidate = ebm.fit(train[x_names], train[y_name]) \n",
    "        \n",
    "        # calculate AUC\n",
    "        ebm_perf = ROC(ebm.predict_proba).explain_perf(valid[x_names], valid[y_name])\n",
    "        candidate_best_score = ebm_perf._internal_obj['overall']['auc']\n",
    "    \n",
    "        # determine if current model is better than previous best\n",
    "        if candidate_best_score > best_score:\n",
    "            best_candidate = candidate\n",
    "            best_score = candidate_best_score\n",
    "            print('Grid search new best score discovered at iteration %d/%d: %.4f.' %\n",
    "                             (int(i + 1), int(n_models), candidate_best_score))\n",
    "\n",
    "        print('---------- ----------')\n",
    "        \n",
    "        del ebm\n",
    "            \n",
    "    return best_candidate\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "8RW_s6asEU2C"
   },
   "source": [
    "Fit EBM with random grid search\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "xSp3lIVHEVWG",
    "outputId": "d81d6079-4bd2-4ce0-8754-f82a1b6b949c"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Grid search run 1/10:\n",
      "Training with parameters: {'n_jobs': 4, 'early_stopping_rounds': 100, 'random_state': 12345, 'max_bins': 512, 'max_interaction_bins': 16, 'interactions': 5, 'outer_bags': 4, 'inner_bags': 0, 'learning_rate': 0.05, 'validation_size': 0.25, 'min_samples_leaf': 1, 'max_leaves': 3}\n",
      "Grid search new best score discovered at iteration 1/10: 0.8214.\n",
      "---------- ----------\n",
      "Grid search run 2/10:\n",
      "Training with parameters: {'n_jobs': 4, 'early_stopping_rounds': 100, 'random_state': 12345, 'max_bins': 128, 'max_interaction_bins': 32, 'interactions': 5, 'outer_bags': 8, 'inner_bags': 0, 'learning_rate': 0.001, 'validation_size': 0.25, 'min_samples_leaf': 2, 'max_leaves': 5}\n",
      "---------- ----------\n",
      "Grid search run 3/10:\n",
      "Training with parameters: {'n_jobs': 4, 'early_stopping_rounds': 100, 'random_state': 12345, 'max_bins': 512, 'max_interaction_bins': 16, 'interactions': 5, 'outer_bags': 4, 'inner_bags': 0, 'learning_rate': 0.001, 'validation_size': 0.5, 'min_samples_leaf': 1, 'max_leaves': 3}\n",
      "---------- ----------\n",
      "Grid search run 4/10:\n",
      "Training with parameters: {'n_jobs': 4, 'early_stopping_rounds': 100, 'random_state': 12345, 'max_bins': 128, 'max_interaction_bins': 64, 'interactions': 5, 'outer_bags': 4, 'inner_bags': 4, 'learning_rate': 0.05, 'validation_size': 0.5, 'min_samples_leaf': 1, 'max_leaves': 5}\n",
      "---------- ----------\n",
      "Grid search run 5/10:\n",
      "Training with parameters: {'n_jobs': 4, 'early_stopping_rounds': 100, 'random_state': 12345, 'max_bins': 512, 'max_interaction_bins': 64, 'interactions': 15, 'outer_bags': 4, 'inner_bags': 0, 'learning_rate': 0.05, 'validation_size': 0.1, 'min_samples_leaf': 10, 'max_leaves': 3}\n",
      "Grid search new best score discovered at iteration 5/10: 0.8249.\n",
      "---------- ----------\n",
      "Grid search run 6/10:\n",
      "Training with parameters: {'n_jobs': 4, 'early_stopping_rounds': 100, 'random_state': 12345, 'max_bins': 256, 'max_interaction_bins': 16, 'interactions': 15, 'outer_bags': 12, 'inner_bags': 4, 'learning_rate': 0.01, 'validation_size': 0.1, 'min_samples_leaf': 2, 'max_leaves': 5}\n",
      "---------- ----------\n",
      "Grid search run 7/10:\n",
      "Training with parameters: {'n_jobs': 4, 'early_stopping_rounds': 100, 'random_state': 12345, 'max_bins': 512, 'max_interaction_bins': 32, 'interactions': 15, 'outer_bags': 4, 'inner_bags': 4, 'learning_rate': 0.05, 'validation_size': 0.25, 'min_samples_leaf': 10, 'max_leaves': 1}\n",
      "---------- ----------\n",
      "Grid search run 8/10:\n",
      "Training with parameters: {'n_jobs': 4, 'early_stopping_rounds': 100, 'random_state': 12345, 'max_bins': 256, 'max_interaction_bins': 16, 'interactions': 15, 'outer_bags': 8, 'inner_bags': 4, 'learning_rate': 0.001, 'validation_size': 0.5, 'min_samples_leaf': 5, 'max_leaves': 3}\n",
      "---------- ----------\n",
      "Grid search run 9/10:\n",
      "Training with parameters: {'n_jobs': 4, 'early_stopping_rounds': 100, 'random_state': 12345, 'max_bins': 256, 'max_interaction_bins': 16, 'interactions': 10, 'outer_bags': 8, 'inner_bags': 0, 'learning_rate': 0.05, 'validation_size': 0.5, 'min_samples_leaf': 5, 'max_leaves': 1}\n",
      "---------- ----------\n",
      "Grid search run 10/10:\n",
      "Training with parameters: {'n_jobs': 4, 'early_stopping_rounds': 100, 'random_state': 12345, 'max_bins': 512, 'max_interaction_bins': 64, 'interactions': 5, 'outer_bags': 4, 'inner_bags': 0, 'learning_rate': 0.001, 'validation_size': 0.25, 'min_samples_leaf': 2, 'max_leaves': 3}\n",
      "---------- ----------\n",
      "EBM training completed in 850.00 s.\n"
     ]
    }
   ],
   "source": [
    "# dictionary of hyperparameter value lists for grid search\n",
    "gs_params = {'max_bins': [128, 256, 512],\n",
    "             'max_interaction_bins': [16, 32, 64],\n",
    "             'interactions': [5, 10, 15],\n",
    "             'outer_bags': [4, 8, 12], \n",
    "             'inner_bags': [0, 4],\n",
    "             'learning_rate': [0.001, 0.01, 0.05],\n",
    "             'validation_size': [0.1, 0.25, 0.5],\n",
    "             'min_samples_leaf': [1, 2, 5, 10],\n",
    "             'max_leaves': [1, 3, 5]}\n",
    "\n",
    "# start local timer\n",
    "ebm_tic = time.time()\n",
    "\n",
    "# EBM grid search\n",
    "best_ebm = ebm_grid(train, valid, x_names, y_name, gs_params=gs_params, n_models=10, \n",
    "                    early_stopping_rounds=100, seed=SEED)\n",
    "\n",
    "# end local timer\n",
    "ebm_toc = time.time() - ebm_tic\n",
    "print('EBM training completed in %.2f s.' % (ebm_toc))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "pCtyRLoQEY8f"
   },
   "source": [
    "Basic AUC assessment\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "O7XCz_M_EZYg",
    "outputId": "6b0277c6-1daf-4b09-cea7-755210696543"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Validation AUC: 0.8249.\n"
     ]
    }
   ],
   "source": [
    "best_ebm_perf = ROC(best_ebm.predict_proba).explain_perf(valid[x_names], valid[y_name])\n",
    "print('Validation AUC: %.4f.' % best_ebm_perf._internal_obj['overall']['auc'])\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Score validation data with model"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>row_id</th>\n",
       "      <th>black</th>\n",
       "      <th>asian</th>\n",
       "      <th>white</th>\n",
       "      <th>amind</th>\n",
       "      <th>hipac</th>\n",
       "      <th>hispanic</th>\n",
       "      <th>non_hispanic</th>\n",
       "      <th>male</th>\n",
       "      <th>female</th>\n",
       "      <th>...</th>\n",
       "      <th>debt_to_income_ratio_missing</th>\n",
       "      <th>loan_amount_std</th>\n",
       "      <th>loan_to_value_ratio_std</th>\n",
       "      <th>no_intro_rate_period_std</th>\n",
       "      <th>intro_rate_period_std</th>\n",
       "      <th>property_value_std</th>\n",
       "      <th>income_std</th>\n",
       "      <th>debt_to_income_ratio_std</th>\n",
       "      <th>high_priced</th>\n",
       "      <th>phat</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.514393</td>\n",
       "      <td>0.333922</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.535932</td>\n",
       "      <td>-0.040307</td>\n",
       "      <td>0.854601</td>\n",
       "      <td>0</td>\n",
       "      <td>0.170768</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>6</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.426448</td>\n",
       "      <td>0.355249</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.474263</td>\n",
       "      <td>-0.020904</td>\n",
       "      <td>1.037419</td>\n",
       "      <td>0</td>\n",
       "      <td>0.324085</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>8</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.277109</td>\n",
       "      <td>0.142995</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>0.111598</td>\n",
       "      <td>-0.019865</td>\n",
       "      <td>0.031916</td>\n",
       "      <td>0</td>\n",
       "      <td>0.023633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>10</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>-0.382476</td>\n",
       "      <td>-0.240432</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>-0.320089</td>\n",
       "      <td>-0.028181</td>\n",
       "      <td>0.946010</td>\n",
       "      <td>0</td>\n",
       "      <td>0.016289</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>11</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>1.0</td>\n",
       "      <td>0.0</td>\n",
       "      <td>NaN</td>\n",
       "      <td>NaN</td>\n",
       "      <td>...</td>\n",
       "      <td>0</td>\n",
       "      <td>0.101220</td>\n",
       "      <td>-0.266529</td>\n",
       "      <td>0.244394</td>\n",
       "      <td>-0.215304</td>\n",
       "      <td>0.111598</td>\n",
       "      <td>0.016515</td>\n",
       "      <td>-1.156406</td>\n",
       "      <td>0</td>\n",
       "      <td>0.004135</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>5 rows × 24 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "   row_id  black  asian  white  amind  hipac  hispanic  non_hispanic  male  \\\n",
       "0       0    NaN    NaN    NaN    NaN    NaN       NaN           NaN   1.0   \n",
       "1       6    0.0    0.0    1.0    0.0    0.0       0.0           1.0   0.0   \n",
       "2       8    0.0    0.0    1.0    0.0    0.0       0.0           1.0   NaN   \n",
       "3      10    0.0    0.0    1.0    0.0    0.0       0.0           1.0   NaN   \n",
       "4      11    0.0    0.0    1.0    0.0    0.0       1.0           0.0   NaN   \n",
       "\n",
       "   female  ...  debt_to_income_ratio_missing  loan_amount_std  \\\n",
       "0     0.0  ...                             0        -0.514393   \n",
       "1     1.0  ...                             0        -0.426448   \n",
       "2     NaN  ...                             0         0.277109   \n",
       "3     NaN  ...                             0        -0.382476   \n",
       "4     NaN  ...                             0         0.101220   \n",
       "\n",
       "   loan_to_value_ratio_std  no_intro_rate_period_std  intro_rate_period_std  \\\n",
       "0                 0.333922                  0.244394              -0.215304   \n",
       "1                 0.355249                  0.244394              -0.215304   \n",
       "2                 0.142995                  0.244394              -0.215304   \n",
       "3                -0.240432                  0.244394              -0.215304   \n",
       "4                -0.266529                  0.244394              -0.215304   \n",
       "\n",
       "   property_value_std  income_std  debt_to_income_ratio_std  high_priced  \\\n",
       "0           -0.535932   -0.040307                  0.854601            0   \n",
       "1           -0.474263   -0.020904                  1.037419            0   \n",
       "2            0.111598   -0.019865                  0.031916            0   \n",
       "3           -0.320089   -0.028181                  0.946010            0   \n",
       "4            0.111598    0.016515                 -1.156406            0   \n",
       "\n",
       "       phat  \n",
       "0  0.170768  \n",
       "1  0.324085  \n",
       "2  0.023633  \n",
       "3  0.016289  \n",
       "4  0.004135  \n",
       "\n",
       "[5 rows x 24 columns]"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "best_ebm_phat = pd.DataFrame(best_ebm.predict_proba(valid[x_names])[:, 1], columns=['phat']) \n",
    "best_ebm_phat = pd.concat([valid.reset_index(drop=True), best_ebm_phat], axis=1)\n",
    "best_ebm_phat.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Select percentiles from predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0: 112323\n",
      "10: 73566\n",
      "20: 18627\n",
      "30: 12113\n",
      "40: 15450\n",
      "50: 49438\n",
      "60: 43071\n",
      "70: 13537\n",
      "80: 159351\n",
      "90: 40856\n",
      "99: 33940\n"
     ]
    }
   ],
   "source": [
    "best_ebm_percentiles = get_percentile_dict('phat', best_ebm_phat, 'row_id')\n",
    "for key in sorted(best_ebm_percentiles.keys()):\n",
    "    print(str(key) + ': ' + str(best_ebm_percentiles[key]))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate EBM contributions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "EBM contributions collected in 136.08 s.\n"
     ]
    }
   ],
   "source": [
    "# start local timer\n",
    "ebm_tic = time.time()\n",
    "\n",
    "# use EBM feature scores as local importance\n",
    "# use mean abs score as global importance\n",
    "best_ebm_contribs = best_ebm.explain_local(valid[x_names])\n",
    "names = best_ebm_contribs._internal_obj['specific'][0]['names']\n",
    "best_ebm_contribs_df = pd.DataFrame(columns=names)\n",
    "\n",
    "# extract scores from insane _internal_obj\n",
    "# new versions just have predict_and_explain() function\n",
    "# use that if you can\n",
    "for i in range(0, valid.shape[0]):\n",
    "    row_df = pd.DataFrame(np.array(best_ebm_contribs._internal_obj['specific'][i]['scores']).reshape(1, 24), columns=names)\n",
    "    best_ebm_contribs_df = best_ebm_contribs_df.append(row_df, ignore_index=True)\n",
    "    del row_df\n",
    "    \n",
    "# end local timer\n",
    "ebm_toc = time.time() - ebm_tic\n",
    "print('EBM contributions collected in %.2f s.' % (ebm_toc))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Collect global feature importance info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "metadata": {},
   "outputs": [],
   "source": [
    "global_fi['EBM Importance'] = np.abs(best_ebm_contribs_df).mean()"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Collect local feature importance info"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "metadata": {},
   "outputs": [],
   "source": [
    "# extract scores at three percentiles of phat\n",
    "for percentile in [10, 50, 90]:\n",
    " \n",
    "    # using valid_idx_map and percentiles dict\n",
    "    # to find the right local contributions\n",
    "    idx = valid_idx_map[valid_idx_map == int(best_ebm_percentiles[percentile])].index[0]\n",
    "    s_df = best_ebm_contribs_df.iloc[idx, :len(x_names)].T\n",
    "    s_df.columns = ['EBM Contribution']\n",
    "    local_fi_dict[percentile]['EBM Contribution'] = s_df\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Analyze feature importance"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compare global feature importance across models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# init 3-pane plot \n",
    "fig, (ax0, ax1, ax2) = plt.subplots(ncols=3)\n",
    "plt.tight_layout()\n",
    "plt.subplots_adjust(left=0, right=2.2, wspace=0.2)\n",
    "\n",
    "# plot global FI across three panes\n",
    "_ = global_fi['GLM Importance'].plot(kind='bar', ax=ax0, title='Best GLM Feature Importance')\n",
    "_ = global_fi['MXGB Importance'].plot(kind='bar', ax=ax1, title='Best MXGB Feature Importance')\n",
    "_ = global_fi['EBM Importance'].plot(kind='bar', ax=ax2, title='Best EBM Feature Importance')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Compare local feature importance across models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "## init 3-pane plot \n",
    "fig, (ax0, ax1, ax2) = plt.subplots(ncols=3, sharey=True)\n",
    "plt.tight_layout()\n",
    "plt.subplots_adjust(left=0, right=2, wspace=0.1)\n",
    "\n",
    "# plot comparisons of local FI across 3 panes\n",
    "_ = local_fi_dict[10].plot(kind='bar', ax=ax0,\n",
    "                             title='10th PCTL of p_high_priced')\n",
    "\n",
    "_ = local_fi_dict[50].plot(kind='bar', ax=ax1,\n",
    "                             title='50th PCTL of p_high_priced')\n",
    "\n",
    "_ = local_fi_dict[90].plot(kind='bar', ax=ax2,\n",
    "                             title='90th PCTL of p_high_priced')\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Utility function for partial dependence"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {},
   "outputs": [],
   "source": [
    "def par_dep(x_name, valid, model, model_type, resolution=20, bins=None):\n",
    "\n",
    "    \"\"\" Creates Pandas DataFrame containing partial dependence or ICE\n",
    "        for a single input variable.\n",
    "        :param x_name: Variable for which to calculate partial dependence.\n",
    "        :param valid: Pandas validation frame.\n",
    "        :param model: Trained model object (assumes binary classifier).\n",
    "        :param model_type: Kind of model: h2o, xgb, or ebm.\n",
    "        :param resolution: The number of points across the domain of xs for which\n",
    "                           to calculate partial dependence, default 20.\n",
    "        :param bins: List of values at which to set xs, default 20 equally-spaced\n",
    "                     points between column minimum and maximum.\n",
    "        :return: Pandas DataFrame containing partial dependence values.\n",
    "    \"\"\"\n",
    "\n",
    "    # turn off pesky Pandas copy warning\n",
    "    pd.options.mode.chained_assignment = None\n",
    "\n",
    "    # determine values at which to calculate partial dependence\n",
    "    if bins is None:\n",
    "        min_ = valid[x_name].min()\n",
    "        max_ = valid[x_name].max()\n",
    "        by = (max_ - min_) / resolution\n",
    "        # modify max and by\n",
    "        # to preserve resolution and actually search up to max\n",
    "        bins = np.arange(min_, (max_ + by), (by + np.round((1. / resolution) * by, 3)))\n",
    "        \n",
    "    # cache original column values\n",
    "    col_cache = valid.loc[:, x_name].copy(deep=True)\n",
    "\n",
    "    # calculate partial dependence\n",
    "    # by setting column of interest to constant\n",
    "    # and scoring the altered data and taking the mean of the predictions\n",
    "    temp_df = valid.copy(deep=True)\n",
    "    temp_df.loc[:, x_name] = bins[0]\n",
    "    for j, _ in enumerate(bins):\n",
    "        if j + 1 < len(bins):\n",
    "            valid.loc[:, x_name] = bins[j + 1]\n",
    "            temp_df = temp_df.append(valid, ignore_index=True)\n",
    "\n",
    "    # return input frame to original cached state\n",
    "    valid.loc[:, x_name] = col_cache\n",
    "\n",
    "    # model predictions\n",
    "    # probably assumes binary classification\n",
    "    if model_type == 'h2o':\n",
    "        temp_df['partial_dependence'] = model.predict(h2o.H2OFrame(temp_df))['p1'].as_data_frame()\n",
    "    if model_type == 'xgb':\n",
    "        temp_df['partial_dependence'] = pd.DataFrame(model.predict(xgb.DMatrix(temp_df), iteration_range=(0, best_mxgb.best_ntree_limit)), columns=['phat'])\n",
    "    if model_type == 'ebm':\n",
    "        temp_df['partial_dependence'] = pd.DataFrame(model.predict_proba(temp_df)[:, 1], columns=['phat'])\n",
    "    \n",
    "    return pd.DataFrame(temp_df[[x_name, 'partial_dependence']].groupby([x_name]).mean()).reset_index()\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Calculate partial dependence for all X and models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Calculating partial dependence for term_360 ...\n",
      "Calculating partial dependence for conforming ...\n",
      "Calculating partial dependence for loan_amount_std ...\n",
      "Calculating partial dependence for loan_to_value_ratio_std ...\n",
      "Calculating partial dependence for no_intro_rate_period_std ...\n",
      "Calculating partial dependence for intro_rate_period_std ...\n",
      "Calculating partial dependence for property_value_std ...\n",
      "Calculating partial dependence for income_std ...\n",
      "Calculating partial dependence for debt_to_income_ratio_std ...\n",
      "Done.\n",
      "Partial dependence calculated in 282.44 s.\n"
     ]
    }
   ],
   "source": [
    "# start local timer\n",
    "pd_tic = time.time()\n",
    "\n",
    "# init dict to hold results\n",
    "pd_dict = {}\n",
    "\n",
    "# cycle through names and model types to calculate par dep\n",
    "for name in x_names:\n",
    "    \n",
    "    print('Calculating partial dependence for %s ...' % name)\n",
    "    \n",
    "    # setup a dataframe to hold results\n",
    "    # use bins from first par_dep() run\n",
    "    pd_dict[name] = pd.DataFrame(columns=[name, 'h2o', 'xgb', 'ebm'])\n",
    "    first_pd = par_dep(name, valid[x_names], best_glm, 'h2o')\n",
    "    pd_dict[name][name] = first_pd[name]\n",
    "    bins = first_pd[name]\n",
    "    pd_dict[name]['h2o'] = first_pd['partial_dependence']\n",
    "    \n",
    "    # calculate par dep for remaining models\n",
    "    pd_dict[name]['xgb'] = par_dep(name, valid[x_names], best_mxgb, 'xgb', bins=bins)['partial_dependence']\n",
    "    pd_dict[name]['ebm'] = par_dep(name, valid[x_names], best_ebm, 'ebm', bins=bins)['partial_dependence']\n",
    "    \n",
    "print('Done.')\n",
    "\n",
    "# end local timer\n",
    "pd_toc = time.time() - pd_tic\n",
    "print('Partial dependence calculated in %.2f s.' % (pd_toc))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "Plot partial dependence for all features and models"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 46,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    },
    {
     "data": {
      "image/png": "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gt69ezNq1Cj27NnDqFGjSEoKDj4/YsQIsrOzgeCgBJdccgl9+/Zl4MCBfPXVV36GLhI31mzdzcMfLuCgTk3pl5HmdzgiIr6YOnUq/fr1Iz8/n127dtG7d2+ysrK45ppr6N27NyeeeCLHH388b7755t5l/vKXvzBs2DCGDRvG0qVLfYxeRCSyXnnlFYYNG8aAAQO46qqrKCkpAeB3v/sdgwYN4sgjj2Tz5s0AHHbYYdx8880ceuih9OzZk6lTp3LaaafRtWtX7r777mqLab+3LzOzROAJ4GggG5hqZhOdc/NDZlsB/No5t83MjgOeBoaHTD/cOVdt/aHue28e89dtr67VAdCrTSP+eFLvCudZsmQJ48eP55lnnuHMM8/krbfe4vzzz987/fnnn+ess84C4IknngBgzpw5LFy4kFGjRrF48WJSU1OrNW6R2sQ5xx1vZwHwyOl9437gDxGJDX4clwwdOpSTTz6Zu+++mz179nD++eezePFiVq5cyZw5c9i0aRM9e/bk0ksv3btMo0aNmDJlCi+99BI33XQT77//frXGLCKyP37kywULFvDaa68xefJkkpOTueaaaxg3bhy7du1i0KBB/O1vf+P+++/nvvvu4/HHHwcgJSWFb775hscee4zRo0czffp00tPT6dy5MzfffDNNmzatctzhtIgPA5Y655Y75wqBCcDo0Bmcc98757Z5L38EMqocWRTq2LEjAwYMAGDw4MGsXLly77SHHnqIpKQkzjvvPAC+++47LrjgAgB69OhBhw4dWLx4caRDFokr46esYfLSLdx5Qk8ymtTzOxwREV/dc889fPbZZ0ybNo3bbruN7777jjPOOIOEhARatWrF4Ycf/ov5zznnnL0/f/jhBz9CFhGJuC+++ILp06czdOhQBgwYwBdffMHy5ctJSEjY24h6/vnn89133+1d5uSTTwagb9++9O7dm9atW1OnTh06derEmjVrqiWu/baIA22B0K1l88vW7rIuAz4Kee2AT83MAU85554ubyEzuxK4EqB9+/YVBrS/luuaUqdOnb3PExMT2bNnDwAvvvgi77//Pl988cXeFjrnnC8xisSr7G27eeiD+Yzs3JRzh1WcI2qTyuROEakZfh2XbN26lZ07d1JUVER+fv5+jz1CexHV9h5Fyp0i/vAjXzrnuOiii/5nLK8HHnjgF69D82Jp3ZeQ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\n",
      "text/plain": [
       "<Figure size 432x288 with 3 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "# loop through names to calculate par dep \n",
    "for name in x_names:\n",
    "    \n",
    "    # init 3-pane plot\n",
    "    fig, (ax0, ax1, ax2) = plt.subplots(ncols=3, sharey=True)\n",
    "    plt.tight_layout()\n",
    "    plt.subplots_adjust(left=0, right=2.2, wspace=0.2)\n",
    "  \n",
    "    # plot par dep from each model across frames\n",
    "    pd_dict[name].plot(kind='line', x=name, y='h2o', ax=ax0, title='Best GLM Partial Dependence')\n",
    "    ax0.set_xlabel(name)\n",
    "    pd_dict[name].plot(kind='line', x=name, y='xgb', ax=ax1, title='Best MXGB Partial Dependence') \n",
    "    ax1.set_xlabel(name)\n",
    "    pd_dict[name].plot(kind='line', x=name, y='ebm', ax=ax2, title='Best EBM Partial Dependence')\n",
    "    ax2.set_xlabel(name)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "6YLevosOEdEr"
   },
   "source": [
    "End timer\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 44,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "OCxaIVseEeTg",
    "outputId": "f5e8d3fe-7eb5-4edc-d2f6-e880bb996c82"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "All tasks completed in 5988.76 s.\n"
     ]
    }
   ],
   "source": [
    "toc = time.time() - tic\n",
    "print('All tasks completed in %.2f s.' % (toc))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {
    "id": "ju7WmqjlEfoe"
   },
   "source": [
    "Shutdown h2o\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {
    "colab": {
     "base_uri": "https://localhost:8080/"
    },
    "id": "TFAhzEDGEhO7",
    "outputId": "eaab6873-18b9-408d-fc64-05303617946f"
   },
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "H2O session _sid_9fca closed.\n"
     ]
    }
   ],
   "source": [
    "h2o.cluster().shutdown(prompt=False)\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "colab": {
   "name": "RML 1.ipynb",
   "provenance": []
  },
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.8.8"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 1
}
